// Automatically generated by genmodel utility. DO NOT EDIT!
package octav

import (
	"encoding/json"
	"github.com/builderscon/octav/octav/db"
	"github.com/lestrrat/go-pdebug"
)

func (v Venue) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "id", "name", "address", "longitude", "latitude"), nil
}

func (v Venue) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "name":
		return v.Name, nil
	case "address":
		return v.Address, nil
	case "longitude":
		return v.Longitude, nil
	case "latitude":
		return v.Latitude, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v Venue) MarshalJSON() ([]byte, error) {
	m := make(map[string]interface{})
	m["id"] = v.ID
	m["name"] = v.Name
	m["address"] = v.Address
	m["longitude"] = v.Longitude
	m["latitude"] = v.Latitude
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return marshalJSONWithL10N(buf, v.L10N)
}

func (v *Venue) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}

	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			v.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidFieldType
		}
	}

	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			v.Name = jv.(string)
			delete(m, "name")
		default:
			return ErrInvalidFieldType
		}
	}

	if jv, ok := m["address"]; ok {
		switch jv.(type) {
		case string:
			v.Address = jv.(string)
			delete(m, "address")
		default:
			return ErrInvalidFieldType
		}
	}

	if jv, ok := m["longitude"]; ok {
		switch jv.(type) {
		case float64:
			v.Longitude = jv.(float64)
			delete(m, "longitude")
		default:
			return ErrInvalidFieldType
		}
	}

	if jv, ok := m["latitude"]; ok {
		switch jv.(type) {
		case float64:
			v.Latitude = jv.(float64)
			delete(m, "latitude")
		default:
			return ErrInvalidFieldType
		}
	}

	if err := ExtractL10NFields(m, &v.L10N, []string{"name", "address"}); err != nil {
		return err
	}
	return nil
}

func (v *Venue) Load(tx *db.Tx, id string) error {
	vdb := db.Venue{}
	if err := vdb.LoadByEID(tx, id); err != nil {
		return err
	}

	if err := v.FromRow(vdb); err != nil {
		return err
	}
	if err := v.LoadLocalizedFields(tx); err != nil {
		return err
	}
	return nil
}

func (v *Venue) LoadLocalizedFields(tx *db.Tx) error {
	ls, err := db.LoadLocalizedStringsForParent(tx, v.ID, "Venue")
	if err != nil {
		return err
	}

	if len(ls) > 0 {
		v.L10N = LocalizedFields{}
		for _, l := range ls {
			v.L10N.Set(l.Language, l.Name, l.Localized)
		}
	}
	return nil
}

func (v *Venue) FromRow(vdb db.Venue) error {
	v.ID = vdb.EID
	v.Name = vdb.Name
	v.Address = vdb.Address
	v.Longitude = vdb.Longitude
	v.Latitude = vdb.Latitude
	return nil
}

func (v *Venue) Create(tx *db.Tx) error {
	if v.ID == "" {
		v.ID = UUID()
	}

	vdb := db.Venue{
		EID:       v.ID,
		Name:      v.Name,
		Address:   v.Address,
		Longitude: v.Longitude,
		Latitude:  v.Latitude,
	}
	if err := vdb.Create(tx); err != nil {
		return err
	}

	if err := v.L10N.CreateLocalizedStrings(tx, "Venue", v.ID); err != nil {
		return err
	}
	return nil
}

func (v *Venue) Delete(tx *db.Tx) error {
	if pdebug.Enabled {
		g := pdebug.Marker("Venue.Delete (%s)", v.ID)
		defer g.End()
	}

	vdb := db.Venue{EID: v.ID}
	if err := vdb.Delete(tx); err != nil {
		return err
	}
	if err := db.DeleteLocalizedStringsForParent(tx, v.ID, "Venue"); err != nil {
		return err
	}
	return nil
}

func (v *VenueList) Load(tx *db.Tx, since string, limit int) error {
	vdbl := db.VenueList{}
	if err := vdbl.LoadSinceEID(tx, since, limit); err != nil {
		return err
	}
	res := make([]Venue, len(vdbl))
	for i, vdb := range vdbl {
		v := Venue{}
		if err := v.FromRow(vdb); err != nil {
			return err
		}
		if err := v.LoadLocalizedFields(tx); err != nil {
			return err
		}
		res[i] = v
	}
	*v = res
	return nil
}
