// Automatically generated by genmodel utility. DO NOT EDIT!
package octav

import "encoding/json"

func (v Venue) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "id", "name", "address", "longitude", "latitude"), nil
}

func (v Venue) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "name":
		return v.Name, nil
	case "address":
		return v.Address, nil
	case "longitude":
		return v.Longitude, nil
	case "latitude":
		return v.Latitude, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v Venue) MarshalJSON() ([]byte, error) {
	m := make(map[string]interface{})
	m["id"] = v.ID
	m["name"] = v.Name
	m["address"] = v.Address
	m["longitude"] = v.Longitude
	m["latitude"] = v.Latitude
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return marshalJSONWithL10N(buf, v.L10N)
}
func (v *Venue) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			v.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			v.Name = jv.(string)
			delete(m, "name")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["address"]; ok {
		switch jv.(type) {
		case string:
			v.Address = jv.(string)
			delete(m, "address")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["longitude"]; ok {
		switch jv.(type) {
		case float64:
			v.Longitude = jv.(float64)
			delete(m, "longitude")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["latitude"]; ok {
		switch jv.(type) {
		case float64:
			v.Latitude = jv.(float64)
			delete(m, "latitude")
		default:
			return ErrInvalidFieldType
		}
	}
	return nil
}
