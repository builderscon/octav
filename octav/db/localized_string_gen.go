package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"database/sql"
	"errors"
)

var LocalizedStringTable = "localized_strings"

type LocalizedStringList []LocalizedString

func (l *LocalizedString) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&l.OID, &l.ParentID, &l.ParentType, &l.Name, &l.Language, &l.Localized)
}

func (l *LocalizedString) Create(tx *Tx) error {
	result, err := tx.Exec(`INSERT INTO `+LocalizedStringTable+` (parent_id, parent_type, name, language, localized) VALUES (?, ?, ?, ?, ?)`, l.ParentID, l.ParentType, l.Name, l.Language, l.Localized)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	l.OID = lii
	return nil
}

func (l LocalizedString) Update(tx *Tx) error {
	if l.OID != 0 {
		_, err := tx.Exec(`UPDATE `+LocalizedStringTable+` SET parent_id = ?, parent_type = ?, name = ?, language = ?, localized = ? WHERE oid = ?`, l.ParentID, l.ParentType, l.Name, l.Language, l.Localized, l.OID)
		return err
	}
	return errors.New("either OID/EID must be filled")
}

func (l LocalizedString) Delete(tx *Tx) error {
	if l.OID != 0 {
		_, err := tx.Exec(`DELETE FROM `+LocalizedStringTable+` WHERE oid = ?`, l.OID)
		return err
	}

	return errors.New("column OID must be filled")
}

func (v *LocalizedStringList) FromRows(rows *sql.Rows, capacity int) error {
	var res []LocalizedString
	if capacity > 0 {
		res = make([]LocalizedString, 0, capacity)
	} else {
		res = []LocalizedString{}
	}

	for rows.Next() {
		vdb := LocalizedString{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}
