package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"

	"github.com/lestrrat/go-pdebug"
	"github.com/pkg/errors"
)

const LocalizedStringStdSelectColumns = "localized_strings.oid, localized_strings.parent_id, localized_strings.parent_type, localized_strings.name, localized_strings.language, localized_strings.localized"
const LocalizedStringTable = "localized_strings"

type LocalizedStringList []LocalizedString

func (l *LocalizedString) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&l.OID, &l.ParentID, &l.ParentType, &l.Name, &l.Language, &l.Localized)
}

func (l *LocalizedString) Create(tx *sql.Tx, opts ...InsertOption) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("db.LocalizedString.Create").BindError(&err)
		defer g.End()
		pdebug.Printf("%#v", l)
	}
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(LocalizedStringTable)
	stmt.WriteString(` (parent_id, parent_type, name, language, localized) VALUES (?, ?, ?, ?, ?)`)
	result, err := Exec(tx, stmt.String(), l.ParentID, l.ParentType, l.Name, l.Language, l.Localized)
	if err != nil {
		return errors.Wrap(err, `failed to execute statement`)
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return errors.Wrap(err, `failed to fetch last insert ID`)
	}

	l.OID = lii
	return nil
}

func (l LocalizedString) Update(tx *sql.Tx) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker(`LocalizedString.Update`).BindError(&err)
		defer g.End()
	}
	if l.OID != 0 {
		if pdebug.Enabled {
			pdebug.Printf(`Using OID (%d) as key`, l.OID)
		}
		const sqltext = `UPDATE localized_strings SET parent_id = ?, parent_type = ?, name = ?, language = ?, localized = ? WHERE oid = ?`
		if _, err := Exec(tx, sqltext, l.ParentID, l.ParentType, l.Name, l.Language, l.Localized, l.OID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}
	return errors.New("OID must be filled")
}

func (l LocalizedString) Delete(tx *sql.Tx) error {
	if l.OID != 0 {
		const sqltext = `DELETE FROM localized_strings WHERE oid = ?`
		if _, err := Exec(tx, sqltext, l.OID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}
	return errors.New("column OID must be filled")
}

func (v *LocalizedStringList) FromRows(rows *sql.Rows, capacity int) error {
	var res []LocalizedString
	if capacity > 0 {
		res = make([]LocalizedString, 0, capacity)
	} else {
		res = []LocalizedString{}
	}

	for rows.Next() {
		vdb := LocalizedString{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}
