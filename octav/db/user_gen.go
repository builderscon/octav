package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"
	"strconv"
	"time"

	"github.com/builderscon/octav/octav/tools"
	"github.com/lestrrat/go-pdebug"
	"github.com/pkg/errors"
)

const UserStdSelectColumns = "users.oid, users.eid, users.auth_via, users.auth_user_id, users.avatar_url, users.first_name, users.last_name, users.lang, users.nickname, users.email, users.tshirt_size, users.is_admin, users.timezone, users.created_on, users.modified_on"
const UserTable = "users"

type UserList []User

func (u *User) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&u.OID, &u.EID, &u.AuthVia, &u.AuthUserID, &u.AvatarURL, &u.FirstName, &u.LastName, &u.Lang, &u.Nickname, &u.Email, &u.TshirtSize, &u.IsAdmin, &u.Timezone, &u.CreatedOn, &u.ModifiedOn)
}

func init() {
	hooks = append(hooks, func() {
		stmt := tools.GetBuffer()
		defer tools.ReleaseBuffer(stmt)

		stmt.Reset()
		stmt.WriteString(`DELETE FROM `)
		stmt.WriteString(UserTable)
		stmt.WriteString(` WHERE oid = ?`)
		library.Register("sqlUserDeleteByOIDKey", stmt.String())

		stmt.Reset()
		stmt.WriteString(`UPDATE `)
		stmt.WriteString(UserTable)
		stmt.WriteString(` SET eid = ?, auth_via = ?, auth_user_id = ?, avatar_url = ?, first_name = ?, last_name = ?, lang = ?, nickname = ?, email = ?, tshirt_size = ?, is_admin = ?, timezone = ? WHERE oid = ?`)
		library.Register("sqlUserUpdateByOIDKey", stmt.String())

		stmt.Reset()
		stmt.WriteString(`SELECT `)
		stmt.WriteString(UserStdSelectColumns)
		stmt.WriteString(` FROM `)
		stmt.WriteString(UserTable)
		stmt.WriteString(` WHERE `)
		stmt.WriteString(UserTable)
		stmt.WriteString(`.eid = ?`)
		library.Register("sqlUserLoadByEIDKey", stmt.String())

		stmt.Reset()
		stmt.WriteString(`DELETE FROM `)
		stmt.WriteString(UserTable)
		stmt.WriteString(` WHERE eid = ?`)
		library.Register("sqlUserDeleteByEIDKey", stmt.String())

		stmt.Reset()
		stmt.WriteString(`UPDATE `)
		stmt.WriteString(UserTable)
		stmt.WriteString(` SET eid = ?, auth_via = ?, auth_user_id = ?, avatar_url = ?, first_name = ?, last_name = ?, lang = ?, nickname = ?, email = ?, tshirt_size = ?, is_admin = ?, timezone = ? WHERE eid = ?`)
		library.Register("sqlUserUpdateByEIDKey", stmt.String())
	})
}

func (u *User) LoadByEID(tx *sql.Tx, eid string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker(`User.LoadByEID %s`, eid).BindError(&err)
		defer g.End()
	}
	stmt, err := library.GetStmt("sqlUserLoadByEIDKey")
	if err != nil {
		return errors.Wrap(err, `failed to get statement`)
	}
	row := tx.Stmt(stmt).QueryRow(eid)
	if err := u.Scan(row); err != nil {
		return err
	}
	return nil
}

func (u *User) Create(tx *sql.Tx, opts ...InsertOption) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("db.User.Create").BindError(&err)
		defer g.End()
		pdebug.Printf("%#v", u)
	}
	if u.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	u.CreatedOn = time.Now()
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(UserTable)
	stmt.WriteString(` (eid, auth_via, auth_user_id, avatar_url, first_name, last_name, lang, nickname, email, tshirt_size, is_admin, timezone, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`)
	result, err := tx.Exec(stmt.String(), u.EID, u.AuthVia, u.AuthUserID, u.AvatarURL, u.FirstName, u.LastName, u.Lang, u.Nickname, u.Email, u.TshirtSize, u.IsAdmin, u.Timezone, u.CreatedOn, u.ModifiedOn)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	u.OID = lii
	return nil
}

func (u User) Update(tx *sql.Tx) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker(`User.Update`).BindError(&err)
		defer g.End()
	}
	if u.OID != 0 {
		if pdebug.Enabled {
			pdebug.Printf(`Using OID (%d) as key`, u.OID)
		}
		stmt, err := library.GetStmt("sqlUserUpdateByOIDKey")
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(u.EID, u.AuthVia, u.AuthUserID, u.AvatarURL, u.FirstName, u.LastName, u.Lang, u.Nickname, u.Email, u.TshirtSize, u.IsAdmin, u.Timezone, u.OID)
		return err
	}
	if u.EID != "" {
		if pdebug.Enabled {
			pdebug.Printf(`Using EID (%s) as key`, u.EID)
		}
		stmt, err := library.GetStmt("sqlUserUpdateByEIDKey")
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(u.EID, u.AuthVia, u.AuthUserID, u.AvatarURL, u.FirstName, u.LastName, u.Lang, u.Nickname, u.Email, u.TshirtSize, u.IsAdmin, u.Timezone, u.EID)
		return err
	}
	return errors.New("either OID/EID must be filled")
}

func (u User) Delete(tx *sql.Tx) error {
	if u.OID != 0 {
		stmt, err := library.GetStmt("sqlUserDeleteByOIDKey")
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(u.OID)
		return err
	}

	if u.EID != "" {
		stmt, err := library.GetStmt("sqlUserDeleteByEIDKey")
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(u.EID)
		return err
	}

	return errors.New("either OID/EID must be filled")
}

func (v *UserList) FromRows(rows *sql.Rows, capacity int) error {
	var res []User
	if capacity > 0 {
		res = make([]User, 0, capacity)
	} else {
		res = []User{}
	}

	for rows.Next() {
		vdb := User{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}

func (v *UserList) LoadSinceEID(tx *sql.Tx, since string, limit int) error {
	var s int64
	if id := since; id != "" {
		vdb := User{}
		if err := vdb.LoadByEID(tx, id); err != nil {
			return err
		}

		s = vdb.OID
	}
	return v.LoadSince(tx, s, limit)
}

func (v *UserList) LoadSince(tx *sql.Tx, since int64, limit int) error {
	rows, err := tx.Query(`SELECT `+UserStdSelectColumns+` FROM `+UserTable+` WHERE users.oid > ? ORDER BY oid ASC LIMIT `+strconv.Itoa(limit), since)
	if err != nil {
		return err
	}

	if err := v.FromRows(rows, limit); err != nil {
		return err
	}
	return nil
}
