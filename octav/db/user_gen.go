// Automatically generated by gendb utility. DO NOT EDIT!
package db

import (
	"errors"
	"time"
)

var UserTable = "users"

func (u *User) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&u.OID, &u.EID, &u.FirstName, &u.LastName, &u.Nickname, &u.Email, &u.TshirtSize, &u.CreatedOn, &u.ModifiedOn)
}

func (u *User) LoadByEID(tx *Tx, eid string) error {
	row := tx.QueryRow(`SELECT oid, eid, first_name, last_name, nickname, email, tshirt_size, created_on, modified_on FROM `+UserTable+` WHERE eid = ?`, eid)
	if err := u.Scan(row); err != nil {
		return err
	}
	return nil
}

func (u *User) Create(tx *Tx) error {
	if u.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	u.CreatedOn = time.Now()
	result, err := tx.Exec(`INSERT INTO `+UserTable+` (eid, first_name, last_name, nickname, email, tshirt_size, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, u.EID, u.FirstName, u.LastName, u.Nickname, u.Email, u.TshirtSize, u.CreatedOn, u.ModifiedOn)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	u.OID = lii
	return nil
}

func (u User) Delete(tx *Tx) error {
	if u.OID != 0 {
		_, err := tx.Exec(`DELETE FROM `+UserTable+` WHERE oid = ?`, u.OID)
		return err
	}

	if u.EID != "" {
		_, err := tx.Exec(`DELETE FROM `+UserTable+` WHERE eid = ?`, u.EID)
		return err
	}

	return errors.New("either OID/EID must be filled")
}
