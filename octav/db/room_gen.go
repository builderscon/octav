package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"
	"strconv"
	"time"

	"github.com/builderscon/octav/octav/tools"
	"github.com/lestrrat/go-pdebug"
	"github.com/lestrrat/go-sqllib"
	"github.com/pkg/errors"
)

const RoomStdSelectColumns = "rooms.oid, rooms.eid, rooms.venue_id, rooms.name, rooms.capacity, rooms.created_on, rooms.modified_on"
const RoomTable = "rooms"

type RoomList []Room

func (r *Room) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&r.OID, &r.EID, &r.VenueID, &r.Name, &r.Capacity, &r.CreatedOn, &r.ModifiedOn)
}

var sqlRoomUpdateByOIDKey sqllib.Key
var sqlRoomDeleteByOIDKey sqllib.Key
var sqlRoomLoadByEIDKey sqllib.Key
var sqlRoomUpdateByEIDKey sqllib.Key
var sqlRoomDeleteByEIDKey sqllib.Key

func init() {
	hooks = append(hooks, func() {
		stmt := tools.GetBuffer()
		defer tools.ReleaseBuffer(stmt)

		stmt.Reset()
		stmt.WriteString(`DELETE FROM `)
		stmt.WriteString(RoomTable)
		stmt.WriteString(` WHERE oid = ?`)
		sqlRoomDeleteByOIDKey = library.Register(stmt.String())

		stmt.Reset()
		stmt.WriteString(`UPDATE `)
		stmt.WriteString(RoomTable)
		stmt.WriteString(` SET eid = ?, venue_id = ?, name = ?, capacity = ? WHERE oid = ?`)
		sqlRoomUpdateByOIDKey = library.Register(stmt.String())

		stmt.Reset()
		stmt.WriteString(`SELECT `)
		stmt.WriteString(RoomStdSelectColumns)
		stmt.WriteString(` FROM `)
		stmt.WriteString(RoomTable)
		stmt.WriteString(` WHERE `)
		stmt.WriteString(RoomTable)
		stmt.WriteString(`.eid = ?`)
		sqlRoomLoadByEIDKey = library.Register(stmt.String())

		stmt.Reset()
		stmt.WriteString(`DELETE FROM `)
		stmt.WriteString(RoomTable)
		stmt.WriteString(` WHERE eid = ?`)
		sqlRoomDeleteByEIDKey = library.Register(stmt.String())

		stmt.Reset()
		stmt.WriteString(`UPDATE `)
		stmt.WriteString(RoomTable)
		stmt.WriteString(` SET eid = ?, venue_id = ?, name = ?, capacity = ? WHERE eid = ?`)
		sqlRoomUpdateByEIDKey = library.Register(stmt.String())
	})
}

func (r *Room) LoadByEID(tx *Tx, eid string) error {
	stmt, err := library.GetStmt(sqlRoomLoadByEIDKey)
	if err != nil {
		return errors.Wrap(err, `failed to get statement`)
	}
	row := tx.Stmt(stmt).QueryRow(eid)
	if err := r.Scan(row); err != nil {
		return err
	}
	return nil
}

func (r *Room) Create(tx *Tx, opts ...InsertOption) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("db.Room.Create").BindError(&err)
		defer g.End()
		pdebug.Printf("%#v", r)
	}
	if r.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	r.CreatedOn = time.Now()
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(RoomTable)
	stmt.WriteString(` (eid, venue_id, name, capacity, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?)`)
	result, err := tx.Exec(stmt.String(), r.EID, r.VenueID, r.Name, r.Capacity, r.CreatedOn, r.ModifiedOn)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	r.OID = lii
	return nil
}

func (r Room) Update(tx *Tx) error {
	if r.OID != 0 {
		stmt, err := library.GetStmt(sqlRoomUpdateByOIDKey)
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(r.EID, r.VenueID, r.Name, r.Capacity, r.OID)
		return err
	}
	if r.EID != "" {
		stmt, err := library.GetStmt(sqlRoomUpdateByEIDKey)
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(r.EID, r.VenueID, r.Name, r.Capacity, r.EID)
		return err
	}
	return errors.New("either OID/EID must be filled")
}

func (r Room) Delete(tx *Tx) error {
	if r.OID != 0 {
		stmt, err := library.GetStmt(sqlRoomDeleteByOIDKey)
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(r.OID)
		return err
	}

	if r.EID != "" {
		stmt, err := library.GetStmt(sqlRoomDeleteByEIDKey)
		if err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		_, err = tx.Stmt(stmt).Exec(r.EID)
		return err
	}

	return errors.New("either OID/EID must be filled")
}

func (v *RoomList) FromRows(rows *sql.Rows, capacity int) error {
	var res []Room
	if capacity > 0 {
		res = make([]Room, 0, capacity)
	} else {
		res = []Room{}
	}

	for rows.Next() {
		vdb := Room{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}

func (v *RoomList) LoadSinceEID(tx *Tx, since string, limit int) error {
	var s int64
	if id := since; id != "" {
		vdb := Room{}
		if err := vdb.LoadByEID(tx, id); err != nil {
			return err
		}

		s = vdb.OID
	}
	return v.LoadSince(tx, s, limit)
}

func (v *RoomList) LoadSince(tx *Tx, since int64, limit int) error {
	rows, err := tx.Query(`SELECT `+RoomStdSelectColumns+` FROM `+RoomTable+` WHERE rooms.oid > ? ORDER BY oid ASC LIMIT `+strconv.Itoa(limit), since)
	if err != nil {
		return err
	}

	if err := v.FromRows(rows, limit); err != nil {
		return err
	}
	return nil
}
