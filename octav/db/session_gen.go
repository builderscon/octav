package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"
	"strconv"
	"time"

	"github.com/lestrrat/go-pdebug"
	"github.com/pkg/errors"
)

const SessionStdSelectColumns = "sessions.oid, sessions.eid, sessions.conference_id, sessions.room_id, sessions.speaker_id, sessions.title, sessions.abstract, sessions.memo, sessions.starts_on, sessions.duration, sessions.material_level, sessions.tags, sessions.category, sessions.spoken_language, sessions.slide_language, sessions.slide_subtitles, sessions.slide_url, sessions.video_url, sessions.photo_permission, sessions.video_permission, sessions.has_interpretation, sessions.status, sessions.sort_order, sessions.confirmed, sessions.created_on, sessions.modified_on"
const SessionTable = "sessions"

type SessionList []Session

func (s *Session) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&s.OID, &s.EID, &s.ConferenceID, &s.RoomID, &s.SpeakerID, &s.Title, &s.Abstract, &s.Memo, &s.StartsOn, &s.Duration, &s.MaterialLevel, &s.Tags, &s.Category, &s.SpokenLanguage, &s.SlideLanguage, &s.SlideSubtitles, &s.SlideURL, &s.VideoURL, &s.PhotoPermission, &s.VideoPermission, &s.HasInterpretation, &s.Status, &s.SortOrder, &s.Confirmed, &s.CreatedOn, &s.ModifiedOn)
}

func (s *Session) LoadByEID(tx *Tx, eid string) error {
	row := tx.QueryRow(`SELECT `+SessionStdSelectColumns+` FROM `+SessionTable+` WHERE sessions.eid = ?`, eid)
	if err := s.Scan(row); err != nil {
		return err
	}
	return nil
}

func (s *Session) Create(tx *Tx, opts ...InsertOption) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("db.Session.Create").BindError(&err)
		defer g.End()
		pdebug.Printf("%#v", s)
	}
	if s.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	s.CreatedOn = time.Now()
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(SessionTable)
	stmt.WriteString(` (eid, conference_id, room_id, speaker_id, title, abstract, memo, starts_on, duration, material_level, tags, category, spoken_language, slide_language, slide_subtitles, slide_url, video_url, photo_permission, video_permission, has_interpretation, status, sort_order, confirmed, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`)
	result, err := tx.Exec(stmt.String(), s.EID, s.ConferenceID, s.RoomID, s.SpeakerID, s.Title, s.Abstract, s.Memo, s.StartsOn, s.Duration, s.MaterialLevel, s.Tags, s.Category, s.SpokenLanguage, s.SlideLanguage, s.SlideSubtitles, s.SlideURL, s.VideoURL, s.PhotoPermission, s.VideoPermission, s.HasInterpretation, s.Status, s.SortOrder, s.Confirmed, s.CreatedOn, s.ModifiedOn)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	s.OID = lii
	return nil
}

func (s Session) Update(tx *Tx) error {
	if s.OID != 0 {
		_, err := tx.Exec(`UPDATE `+SessionTable+` SET eid = ?, conference_id = ?, room_id = ?, speaker_id = ?, title = ?, abstract = ?, memo = ?, starts_on = ?, duration = ?, material_level = ?, tags = ?, category = ?, spoken_language = ?, slide_language = ?, slide_subtitles = ?, slide_url = ?, video_url = ?, photo_permission = ?, video_permission = ?, has_interpretation = ?, status = ?, sort_order = ?, confirmed = ? WHERE oid = ?`, s.EID, s.ConferenceID, s.RoomID, s.SpeakerID, s.Title, s.Abstract, s.Memo, s.StartsOn, s.Duration, s.MaterialLevel, s.Tags, s.Category, s.SpokenLanguage, s.SlideLanguage, s.SlideSubtitles, s.SlideURL, s.VideoURL, s.PhotoPermission, s.VideoPermission, s.HasInterpretation, s.Status, s.SortOrder, s.Confirmed, s.OID)
		return err
	}
	if s.EID != "" {
		_, err := tx.Exec(`UPDATE `+SessionTable+` SET conference_id = ?, room_id = ?, speaker_id = ?, title = ?, abstract = ?, memo = ?, starts_on = ?, duration = ?, material_level = ?, tags = ?, category = ?, spoken_language = ?, slide_language = ?, slide_subtitles = ?, slide_url = ?, video_url = ?, photo_permission = ?, video_permission = ?, has_interpretation = ?, status = ?, sort_order = ?, confirmed = ? WHERE eid = ?`, s.ConferenceID, s.RoomID, s.SpeakerID, s.Title, s.Abstract, s.Memo, s.StartsOn, s.Duration, s.MaterialLevel, s.Tags, s.Category, s.SpokenLanguage, s.SlideLanguage, s.SlideSubtitles, s.SlideURL, s.VideoURL, s.PhotoPermission, s.VideoPermission, s.HasInterpretation, s.Status, s.SortOrder, s.Confirmed, s.EID)
		return err
	}
	return errors.New("either OID/EID must be filled")
}

func (s Session) Delete(tx *Tx) error {
	if s.OID != 0 {
		_, err := tx.Exec(`DELETE FROM `+SessionTable+` WHERE oid = ?`, s.OID)
		return err
	}

	if s.EID != "" {
		_, err := tx.Exec(`DELETE FROM `+SessionTable+` WHERE eid = ?`, s.EID)
		return err
	}

	return errors.New("either OID/EID must be filled")
}

func (v *SessionList) FromRows(rows *sql.Rows, capacity int) error {
	var res []Session
	if capacity > 0 {
		res = make([]Session, 0, capacity)
	} else {
		res = []Session{}
	}

	for rows.Next() {
		vdb := Session{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}

func (v *SessionList) LoadSinceEID(tx *Tx, since string, limit int) error {
	var s int64
	if id := since; id != "" {
		vdb := Session{}
		if err := vdb.LoadByEID(tx, id); err != nil {
			return err
		}

		s = vdb.OID
	}
	return v.LoadSince(tx, s, limit)
}

func (v *SessionList) LoadSince(tx *Tx, since int64, limit int) error {
	rows, err := tx.Query(`SELECT `+SessionStdSelectColumns+` FROM `+SessionTable+` WHERE sessions.oid > ? ORDER BY oid ASC LIMIT `+strconv.Itoa(limit), since)
	if err != nil {
		return err
	}

	if err := v.FromRows(rows, limit); err != nil {
		return err
	}
	return nil
}
