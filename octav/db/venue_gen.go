package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"
	"strconv"
	"time"

	"github.com/lestrrat/go-pdebug"
	"github.com/pkg/errors"
)

const VenueStdSelectColumns = "venues.oid, venues.eid, venues.name, venues.address, venues.place_id, venues.url, venues.latitude, venues.longitude, venues.created_on, venues.modified_on"
const VenueTable = "venues"

type VenueList []Venue

func (v *Venue) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&v.OID, &v.EID, &v.Name, &v.Address, &v.PlaceID, &v.URL, &v.Latitude, &v.Longitude, &v.CreatedOn, &v.ModifiedOn)
}

func (v *Venue) LoadByEID(tx *sql.Tx, eid string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker(`Venue.LoadByEID %s`, eid).BindError(&err)
		defer g.End()
	}
	const sqltext = `SELECT venues.oid, venues.eid, venues.name, venues.address, venues.place_id, venues.url, venues.latitude, venues.longitude, venues.created_on, venues.modified_on FROM venues WHERE venues.eid = ?`
	row, err := QueryRow(tx, sqltext, eid)
	if err != nil {
		return errors.Wrap(err, `failed to query row`)
	}
	if err := v.Scan(row); err != nil {
		return err
	}
	return nil
}

func (v *Venue) Create(tx *sql.Tx, opts ...InsertOption) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("db.Venue.Create").BindError(&err)
		defer g.End()
		pdebug.Printf("%#v", v)
	}
	if v.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	v.CreatedOn = time.Now()
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(VenueTable)
	stmt.WriteString(` (eid, name, address, place_id, url, latitude, longitude, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`)
	result, err := Exec(tx, stmt.String(), v.EID, v.Name, v.Address, v.PlaceID, v.URL, v.Latitude, v.Longitude, v.CreatedOn, v.ModifiedOn)
	if err != nil {
		return errors.Wrap(err, `failed to execute statement`)
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return errors.Wrap(err, `failed to fetch last insert ID`)
	}

	v.OID = lii
	return nil
}

func (v Venue) Update(tx *sql.Tx) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker(`Venue.Update`).BindError(&err)
		defer g.End()
	}
	if v.OID != 0 {
		if pdebug.Enabled {
			pdebug.Printf(`Using OID (%d) as key`, v.OID)
		}
		const sqltext = `UPDATE venues SET eid = ?, name = ?, address = ?, place_id = ?, url = ?, latitude = ?, longitude = ? WHERE oid = ?`
		if _, err := Exec(tx, sqltext, v.EID, v.Name, v.Address, v.PlaceID, v.URL, v.Latitude, v.Longitude, v.OID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}

	if v.EID != "" {
		if pdebug.Enabled {
			pdebug.Printf(`Using EID (%s) as key`, v.EID)
		}
		const sqltext = `UPDATE venues SET eid = ?, name = ?, address = ?, place_id = ?, url = ?, latitude = ?, longitude = ? WHERE eid = ?`
		if _, err := Exec(tx, sqltext, v.EID, v.Name, v.Address, v.PlaceID, v.URL, v.Latitude, v.Longitude, v.EID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}
	return errors.New("either OID/EID must be filled")
}

func (v Venue) Delete(tx *sql.Tx) error {
	if v.OID != 0 {
		const sqltext = `DELETE FROM venues WHERE oid = ?`
		if _, err := Exec(tx, sqltext, v.OID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}

	if v.EID != "" {
		const sqltext = `DELETE FROM venues WHERE eid = ?`
		if _, err := Exec(tx, sqltext, v.EID); err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		return nil
	}
	return errors.New("either OID/EID must be filled")
}

func (v *VenueList) FromRows(rows *sql.Rows, capacity int) error {
	var res []Venue
	if capacity > 0 {
		res = make([]Venue, 0, capacity)
	} else {
		res = []Venue{}
	}

	for rows.Next() {
		vdb := Venue{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}

func (v *VenueList) LoadSinceEID(tx *sql.Tx, since string, limit int) error {
	var s int64
	if id := since; id != "" {
		vdb := Venue{}
		if err := vdb.LoadByEID(tx, id); err != nil {
			return err
		}

		s = vdb.OID
	}
	return v.LoadSince(tx, s, limit)
}

func (v *VenueList) LoadSince(tx *sql.Tx, since int64, limit int) error {
	rows, err := Query(tx, `SELECT `+VenueStdSelectColumns+` FROM `+VenueTable+` WHERE venues.oid > ? ORDER BY oid ASC LIMIT `+strconv.Itoa(limit), since)
	if err != nil {
		return err
	}
	defer rows.Close()

	if err := v.FromRows(rows, limit); err != nil {
		return err
	}
	return nil
}
