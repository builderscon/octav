package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"database/sql"
	"errors"
	"time"
)

var ConferenceAdministratorTable = "conference_administrators"

type ConferenceAdministratorList []ConferenceAdministrator

func (c *ConferenceAdministrator) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&c.OID, &c.ConferenceID, &c.UserID, &c.CreatedOn, &c.ModifiedOn)
}

func (c *ConferenceAdministrator) Create(tx *Tx) error {
	c.CreatedOn = time.Now()
	result, err := tx.Exec(`INSERT INTO `+ConferenceAdministratorTable+` (conference_id, user_id, created_on, modified_on) VALUES (?, ?, ?, ?)`, c.ConferenceID, c.UserID, c.CreatedOn, c.ModifiedOn)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	c.OID = lii
	return nil
}

func (c ConferenceAdministrator) Update(tx *Tx) error {
	if c.OID != 0 {
		_, err := tx.Exec(`UPDATE `+ConferenceAdministratorTable+` SET conference_id = ?, user_id = ? WHERE oid = ?`, c.ConferenceID, c.UserID, c.OID)
		return err
	}
	return errors.New("either OID/EID must be filled")
}

func (c ConferenceAdministrator) Delete(tx *Tx) error {
	if c.OID != 0 {
		_, err := tx.Exec(`DELETE FROM `+ConferenceAdministratorTable+` WHERE oid = ?`, c.OID)
		return err
	}

	return errors.New("column OID must be filled")
}

func (v *ConferenceAdministratorList) FromRows(rows *sql.Rows, capacity int) error {
	var res []ConferenceAdministrator
	if capacity > 0 {
		res = make([]ConferenceAdministrator, 0, capacity)
	} else {
		res = []ConferenceAdministrator{}
	}

	for rows.Next() {
		vdb := ConferenceAdministrator{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}
