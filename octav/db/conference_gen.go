package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"
	"errors"
	"strconv"
	"time"
)

const ConferenceStdSelectColumns = "oid, eid, slug, title, sub_title, created_by, created_on, modified_on"
const ConferenceTable = "conferences"

type ConferenceList []Conference

func (c *Conference) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&c.OID, &c.EID, &c.Slug, &c.Title, &c.SubTitle, &c.CreatedBy, &c.CreatedOn, &c.ModifiedOn)
}

func (c *Conference) LoadByEID(tx *Tx, eid string) error {
	row := tx.QueryRow(`SELECT `+ConferenceStdSelectColumns+` FROM `+ConferenceTable+` WHERE eid = ?`, eid)
	if err := c.Scan(row); err != nil {
		return err
	}
	return nil
}

func (c *Conference) Create(tx *Tx, opts ...InsertOption) error {
	if c.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	c.CreatedOn = time.Now()
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(ConferenceTable)
	stmt.WriteString(` (eid, slug, title, sub_title, created_by, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?, ?)`)
	result, err := tx.Exec(stmt.String(), c.EID, c.Slug, c.Title, c.SubTitle, c.CreatedBy, c.CreatedOn, c.ModifiedOn)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	c.OID = lii
	return nil
}

func (c Conference) Update(tx *Tx) error {
	if c.OID != 0 {
		_, err := tx.Exec(`UPDATE `+ConferenceTable+` SET eid = ?, slug = ?, title = ?, sub_title = ?, created_by = ? WHERE oid = ?`, c.EID, c.Slug, c.Title, c.SubTitle, c.CreatedBy, c.OID)
		return err
	}
	if c.EID != "" {
		_, err := tx.Exec(`UPDATE `+ConferenceTable+` SET slug = ?, title = ?, sub_title = ?, created_by = ? WHERE eid = ?`, c.Slug, c.Title, c.SubTitle, c.CreatedBy, c.EID)
		return err
	}
	return errors.New("either OID/EID must be filled")
}

func (c Conference) Delete(tx *Tx) error {
	if c.OID != 0 {
		_, err := tx.Exec(`DELETE FROM `+ConferenceTable+` WHERE oid = ?`, c.OID)
		return err
	}

	if c.EID != "" {
		_, err := tx.Exec(`DELETE FROM `+ConferenceTable+` WHERE eid = ?`, c.EID)
		return err
	}

	return errors.New("either OID/EID must be filled")
}

func (v *ConferenceList) FromRows(rows *sql.Rows, capacity int) error {
	var res []Conference
	if capacity > 0 {
		res = make([]Conference, 0, capacity)
	} else {
		res = []Conference{}
	}

	for rows.Next() {
		vdb := Conference{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}

func (v *ConferenceList) LoadSinceEID(tx *Tx, since string, limit int) error {
	var s int64
	if id := since; id != "" {
		vdb := Conference{}
		if err := vdb.LoadByEID(tx, id); err != nil {
			return err
		}

		s = vdb.OID
	}
	return v.LoadSince(tx, s, limit)
}

func (v *ConferenceList) LoadSince(tx *Tx, since int64, limit int) error {
	rows, err := tx.Query(`SELECT `+ConferenceStdSelectColumns+` FROM `+ConferenceTable+` WHERE oid > ? ORDER BY oid ASC LIMIT `+strconv.Itoa(limit), since)
	if err != nil {
		return err
	}

	if err := v.FromRows(rows, limit); err != nil {
		return err
	}
	return nil
}
