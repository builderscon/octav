package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"
	"strconv"
	"time"

	"github.com/lestrrat/go-pdebug"
	"github.com/pkg/errors"
)

const SessionTypeStdSelectColumns = "session_types.oid, session_types.eid, session_types.conference_id, session_types.name, session_types.abstract, session_types.duration, session_types.submission_start, session_types.submission_end, session_types.created_on, session_types.modified_on"
const SessionTypeTable = "session_types"

type SessionTypeList []SessionType

func (s *SessionType) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&s.OID, &s.EID, &s.ConferenceID, &s.Name, &s.Abstract, &s.Duration, &s.SubmissionStart, &s.SubmissionEnd, &s.CreatedOn, &s.ModifiedOn)
}

func (s *SessionType) LoadByEID(tx *Tx, eid string) error {
	row := tx.QueryRow(`SELECT `+SessionTypeStdSelectColumns+` FROM `+SessionTypeTable+` WHERE session_types.eid = ?`, eid)
	if err := s.Scan(row); err != nil {
		return err
	}
	return nil
}

func (s *SessionType) Create(tx *Tx, opts ...InsertOption) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("db.SessionType.Create").BindError(&err)
		defer g.End()
		pdebug.Printf("%#v", s)
	}
	if s.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	s.CreatedOn = time.Now()
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(SessionTypeTable)
	stmt.WriteString(` (eid, conference_id, name, abstract, duration, submission_start, submission_end, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`)
	result, err := tx.Exec(stmt.String(), s.EID, s.ConferenceID, s.Name, s.Abstract, s.Duration, s.SubmissionStart, s.SubmissionEnd, s.CreatedOn, s.ModifiedOn)
	if err != nil {
		return err
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return err
	}

	s.OID = lii
	return nil
}

func (s SessionType) Update(tx *Tx) error {
	if s.OID != 0 {
		_, err := tx.Exec(`UPDATE `+SessionTypeTable+` SET eid = ?, conference_id = ?, name = ?, abstract = ?, duration = ?, submission_start = ?, submission_end = ? WHERE oid = ?`, s.EID, s.ConferenceID, s.Name, s.Abstract, s.Duration, s.SubmissionStart, s.SubmissionEnd, s.OID)
		return err
	}
	if s.EID != "" {
		_, err := tx.Exec(`UPDATE `+SessionTypeTable+` SET conference_id = ?, name = ?, abstract = ?, duration = ?, submission_start = ?, submission_end = ? WHERE eid = ?`, s.ConferenceID, s.Name, s.Abstract, s.Duration, s.SubmissionStart, s.SubmissionEnd, s.EID)
		return err
	}
	return errors.New("either OID/EID must be filled")
}

func (s SessionType) Delete(tx *Tx) error {
	if s.OID != 0 {
		_, err := tx.Exec(`DELETE FROM `+SessionTypeTable+` WHERE oid = ?`, s.OID)
		return err
	}

	if s.EID != "" {
		_, err := tx.Exec(`DELETE FROM `+SessionTypeTable+` WHERE eid = ?`, s.EID)
		return err
	}

	return errors.New("either OID/EID must be filled")
}

func (v *SessionTypeList) FromRows(rows *sql.Rows, capacity int) error {
	var res []SessionType
	if capacity > 0 {
		res = make([]SessionType, 0, capacity)
	} else {
		res = []SessionType{}
	}

	for rows.Next() {
		vdb := SessionType{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}

func (v *SessionTypeList) LoadSinceEID(tx *Tx, since string, limit int) error {
	var s int64
	if id := since; id != "" {
		vdb := SessionType{}
		if err := vdb.LoadByEID(tx, id); err != nil {
			return err
		}

		s = vdb.OID
	}
	return v.LoadSince(tx, s, limit)
}

func (v *SessionTypeList) LoadSince(tx *Tx, since int64, limit int) error {
	rows, err := tx.Query(`SELECT `+SessionTypeStdSelectColumns+` FROM `+SessionTypeTable+` WHERE session_types.oid > ? ORDER BY oid ASC LIMIT `+strconv.Itoa(limit), since)
	if err != nil {
		return err
	}

	if err := v.FromRows(rows, limit); err != nil {
		return err
	}
	return nil
}
