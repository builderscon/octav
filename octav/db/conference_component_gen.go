package db

// Automatically generated by gendb utility. DO NOT EDIT!

import (
	"bytes"
	"database/sql"
	"strconv"
	"time"

	"github.com/lestrrat/go-pdebug"
	"github.com/pkg/errors"
)

const ConferenceComponentStdSelectColumns = "conference_components.oid, conference_components.eid, conference_components.conference_id, conference_components.name, conference_components.value, conference_components.created_on, conference_components.modified_on"
const ConferenceComponentTable = "conference_components"

type ConferenceComponentList []ConferenceComponent

func (c *ConferenceComponent) Scan(scanner interface {
	Scan(...interface{}) error
}) error {
	return scanner.Scan(&c.OID, &c.EID, &c.ConferenceID, &c.Name, &c.Value, &c.CreatedOn, &c.ModifiedOn)
}

func (c *ConferenceComponent) LoadByEID(tx *sql.Tx, eid string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker(`ConferenceComponent.LoadByEID %s`, eid).BindError(&err)
		defer g.End()
	}
	const sqltext = `SELECT conference_components.oid, conference_components.eid, conference_components.conference_id, conference_components.name, conference_components.value, conference_components.created_on, conference_components.modified_on FROM conference_components WHERE conference_components.eid = ?`
	row, err := QueryRow(tx, sqltext, eid)
	if err != nil {
		return errors.Wrap(err, `failed to query row`)
	}
	if err := c.Scan(row); err != nil {
		return err
	}
	return nil
}

func (c *ConferenceComponent) Create(tx *sql.Tx, opts ...InsertOption) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("db.ConferenceComponent.Create").BindError(&err)
		defer g.End()
		pdebug.Printf("%#v", c)
	}
	if c.EID == "" {
		return errors.New("create: non-empty EID required")
	}

	c.CreatedOn = time.Now()
	doIgnore := false
	for _, opt := range opts {
		switch opt.(type) {
		case insertIgnoreOption:
			doIgnore = true
		}
	}

	stmt := bytes.Buffer{}
	stmt.WriteString("INSERT ")
	if doIgnore {
		stmt.WriteString("IGNORE ")
	}
	stmt.WriteString("INTO ")
	stmt.WriteString(ConferenceComponentTable)
	stmt.WriteString(` (eid, conference_id, name, value, created_on, modified_on) VALUES (?, ?, ?, ?, ?, ?)`)
	result, err := Exec(tx, stmt.String(), c.EID, c.ConferenceID, c.Name, c.Value, c.CreatedOn, c.ModifiedOn)
	if err != nil {
		return errors.Wrap(err, `failed to execute statement`)
	}

	lii, err := result.LastInsertId()
	if err != nil {
		return errors.Wrap(err, `failed to fetch last insert ID`)
	}

	c.OID = lii
	return nil
}

func (c ConferenceComponent) Update(tx *sql.Tx) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker(`ConferenceComponent.Update`).BindError(&err)
		defer g.End()
	}
	if c.OID != 0 {
		if pdebug.Enabled {
			pdebug.Printf(`Using OID (%d) as key`, c.OID)
		}
		const sqltext = `UPDATE conference_components SET eid = ?, conference_id = ?, name = ?, value = ? WHERE oid = ?`
		if _, err := Exec(tx, sqltext, c.EID, c.ConferenceID, c.Name, c.Value, c.OID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}

	if c.EID != "" {
		if pdebug.Enabled {
			pdebug.Printf(`Using EID (%s) as key`, c.EID)
		}
		const sqltext = `UPDATE conference_components SET eid = ?, conference_id = ?, name = ?, value = ? WHERE eid = ?`
		if _, err := Exec(tx, sqltext, c.EID, c.ConferenceID, c.Name, c.Value, c.EID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}
	return errors.New("either OID/EID must be filled")
}

func (c ConferenceComponent) Delete(tx *sql.Tx) error {
	if c.OID != 0 {
		const sqltext = `DELETE FROM conference_components WHERE oid = ?`
		if _, err := Exec(tx, sqltext, c.OID); err != nil {
			return errors.Wrap(err, `failed to execute statement`)
		}
		return nil
	}

	if c.EID != "" {
		const sqltext = `DELETE FROM conference_components WHERE eid = ?`
		if _, err := Exec(tx, sqltext, c.EID); err != nil {
			return errors.Wrap(err, `failed to get statement`)
		}
		return nil
	}
	return errors.New("either OID/EID must be filled")
}

func (v *ConferenceComponentList) FromRows(rows *sql.Rows, capacity int) error {
	var res []ConferenceComponent
	if capacity > 0 {
		res = make([]ConferenceComponent, 0, capacity)
	} else {
		res = []ConferenceComponent{}
	}

	for rows.Next() {
		vdb := ConferenceComponent{}
		if err := vdb.Scan(rows); err != nil {
			return err
		}
		res = append(res, vdb)
	}
	*v = res
	return nil
}

func (v *ConferenceComponentList) LoadSinceEID(tx *sql.Tx, since string, limit int) error {
	var s int64
	if id := since; id != "" {
		vdb := ConferenceComponent{}
		if err := vdb.LoadByEID(tx, id); err != nil {
			return err
		}

		s = vdb.OID
	}
	return v.LoadSince(tx, s, limit)
}

func (v *ConferenceComponentList) LoadSince(tx *sql.Tx, since int64, limit int) error {
	rows, err := Query(tx, `SELECT `+ConferenceComponentStdSelectColumns+` FROM `+ConferenceComponentTable+` WHERE conference_components.oid > ? ORDER BY oid ASC LIMIT `+strconv.Itoa(limit), since)
	if err != nil {
		return err
	}
	defer rows.Close()

	if err := v.FromRows(rows, limit); err != nil {
		return err
	}
	return nil
}
