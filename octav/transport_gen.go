// Automatically generated by gentransport utility. DO NOT EDIT!
package octav

import (
	"encoding/json"
	"errors"
)

func (r CreateSessionRequest) MarshalJSON() ([]byte, error) {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["speaker_id"] = r.SpeakerID
	m["title"] = r.Title
	if r.Abstract.Valid() {
		m["abstract"] = r.Abstract.Value()
	}
	if r.Memo.Valid() {
		m["memo"] = r.Memo.Value()
	}
	m["duration"] = r.Duration
	if r.MaterialLevel.Valid() {
		m["material_level"] = r.MaterialLevel.Value()
	}
	m["tags"] = r.Tags
	if r.Category.Valid() {
		m["category"] = r.Category.Value()
	}
	if r.SpokenLanguage.Valid() {
		m["spoken_language"] = r.SpokenLanguage.Value()
	}
	if r.SlideLanguage.Valid() {
		m["slide_language"] = r.SlideLanguage.Value()
	}
	if r.SlideSubtitles.Valid() {
		m["slide_subtitles"] = r.SlideSubtitles.Value()
	}
	if r.SlideURL.Valid() {
		m["slide_url"] = r.SlideURL.Value()
	}
	if r.VideoURL.Valid() {
		m["video_url"] = r.VideoURL.Value()
	}
	if r.PhotoPermission.Valid() {
		m["photo_permission"] = r.PhotoPermission.Value()
	}
	if r.VideoPermission.Valid() {
		m["video_permission"] = r.VideoPermission.Value()
	}
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return marshalJSONWithL10N(buf, r.L10N)
}

func (r *CreateSessionRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		if jv, ok := v.(string); ok {
			r.ConferenceID = jv
			return nil
		}
	case "speaker_id":
		if jv, ok := v.(string); ok {
			r.SpeakerID = jv
			return nil
		}
	case "title":
		if jv, ok := v.(string); ok {
			r.Title = jv
			return nil
		}
	case "abstract":
		return r.Abstract.Set(v)
	case "memo":
		return r.Memo.Set(v)
	case "duration":
		if jv, ok := v.(int); ok {
			r.Duration = jv
			return nil
		}
	case "material_level":
		return r.MaterialLevel.Set(v)
	case "tags":
		if jv, ok := v.([]string); ok {
			r.Tags = jv
			return nil
		}
	case "category":
		return r.Category.Set(v)
	case "spoken_language":
		return r.SpokenLanguage.Set(v)
	case "slide_language":
		return r.SlideLanguage.Set(v)
	case "slide_subtitles":
		return r.SlideSubtitles.Set(v)
	case "slide_url":
		return r.SlideURL.Set(v)
	case "video_url":
		return r.VideoURL.Set(v)
	case "photo_permission":
		return r.PhotoPermission.Set(v)
	case "video_permission":
		return r.VideoPermission.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}
