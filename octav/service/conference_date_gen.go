package service

// Automatically generated by genmodel utility. DO NOT EDIT!

import (
	"context"
	"database/sql"
	"sync"
	"time"

	"github.com/builderscon/octav/octav/cache"

	"github.com/builderscon/octav/octav/db"
	"github.com/builderscon/octav/octav/internal/errors"
	"github.com/builderscon/octav/octav/model"
	"github.com/lestrrat/go-pdebug"
)

var _ = time.Time{}
var _ = cache.WithExpires(time.Minute)
var _ = context.Background
var _ = errors.Wrap
var _ = model.ConferenceDate{}
var _ = db.ConferenceDate{}
var _ = sql.ErrNoRows
var _ = pdebug.Enabled

var conferenceDateSvc ConferenceDateSvc
var conferenceDateOnce sync.Once

func ConferenceDate() *ConferenceDateSvc {
	conferenceDateOnce.Do(conferenceDateSvc.Init)
	return &conferenceDateSvc
}

func (v *ConferenceDateSvc) Lookup(ctx context.Context, tx *sql.Tx, m *model.ConferenceDate, id string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("service.ConferenceDate.Lookup").BindError(&err)
		defer g.End()
	}

	var r model.ConferenceDate
	c := Cache()
	key := c.Key("ConferenceDate", id)
	var cacheMiss bool
	_, err = c.GetOrSet(key, &r, func() (interface{}, error) {
		if pdebug.Enabled {
			cacheMiss = true
		}
		if err := r.Load(tx, id); err != nil {
			return nil, errors.Wrap(err, "failed to load model.ConferenceDate from database")
		}
		return &r, nil
	}, cache.WithExpires(time.Hour))
	if pdebug.Enabled {
		cacheSt := `HIT`
		if cacheMiss {
			cacheSt = `MISS`
		}
		pdebug.Printf(`CACHE %s: %s`, cacheSt, key)
	}
	*m = r
	return nil
}

// Create takes in the transaction, the incoming payload, and a reference to
// a database row. The database row is initialized/populated so that the
// caller can use it afterwards.
func (v *ConferenceDateSvc) Create(ctx context.Context, tx *sql.Tx, vdb *db.ConferenceDate, payload *model.CreateConferenceDateRequest) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("service.ConferenceDate.Create").BindError(&err)
		defer g.End()
	}

	if err := v.populateRowForCreate(vdb, payload); err != nil {
		return errors.Wrap(err, `failed to populate row`)
	}

	if err := vdb.Create(tx, payload.DatabaseOptions...); err != nil {
		return errors.Wrap(err, `failed to insert into database`)
	}

	return nil
}

func (v *ConferenceDateSvc) Update(tx *sql.Tx, vdb *db.ConferenceDate) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("service.ConferenceDate.Update (%s)", vdb.EID).BindError(&err)
		defer g.End()
	}

	if vdb.EID == `` {
		return errors.New("vdb.EID is required (did you forget to call vdb.Load(tx) before hand?)")
	}

	if err := vdb.Update(tx); err != nil {
		return errors.Wrap(err, `failed to update database`)
	}
	c := Cache()
	key := c.Key("ConferenceDate", vdb.EID)
	if pdebug.Enabled {
		pdebug.Printf(`CACHE DEL %s`, key)
	}
	cerr := c.Delete(key)
	if pdebug.Enabled {
		if cerr != nil {
			pdebug.Printf(`CACHE ERR: %s`, cerr)
		}
	}
	return nil
}

func (v *ConferenceDateSvc) Delete(tx *sql.Tx, id string) error {
	if pdebug.Enabled {
		g := pdebug.Marker("ConferenceDate.Delete (%s)", id)
		defer g.End()
	}

	vdb := db.ConferenceDate{EID: id}
	if err := vdb.Delete(tx); err != nil {
		return errors.Wrap(err, `failed to delete from database`)
	}
	c := Cache()
	key := c.Key("ConferenceDate", id)
	c.Delete(key)
	if pdebug.Enabled {
		pdebug.Printf(`CACHE DEL %s`, key)
	}
	return nil
}
