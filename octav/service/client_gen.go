package service

// Automatically generated by genmodel utility. DO NOT EDIT!

import (
	"context"
	"sync"
	"time"

	"github.com/builderscon/octav/octav/cache"

	"github.com/builderscon/octav/octav/db"
	"github.com/builderscon/octav/octav/internal/errors"
	"github.com/builderscon/octav/octav/model"
	"github.com/lestrrat/go-pdebug"
)

var _ = time.Time{}
var _ = cache.WithExpires(time.Minute)
var _ = context.Background
var _ = errors.Wrap
var _ = model.Client{}
var _ = db.Client{}
var _ = pdebug.Enabled

var clientSvc ClientSvc
var clientOnce sync.Once

func Client() *ClientSvc {
	clientOnce.Do(clientSvc.Init)
	return &clientSvc
}

func (v *ClientSvc) LookupFromPayload(tx *db.Tx, m *model.Client, payload *model.LookupClientRequest) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("service.Client.LookupFromPayload").BindError(&err)
		defer g.End()
	}
	if err = v.Lookup(tx, m, payload.ID); err != nil {
		return errors.Wrap(err, "failed to load model.Client from database")
	}
	return nil
}

func (v *ClientSvc) Lookup(tx *db.Tx, m *model.Client, id string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("service.Client.Lookup").BindError(&err)
		defer g.End()
	}

	var r model.Client
	key := `api.Client.` + id
	c := Cache()
	var cacheMiss bool
	_, err = c.GetOrSet(key, &r, func() (interface{}, error) {
		if pdebug.Enabled {
			cacheMiss = true
		}
		if err := r.Load(tx, id); err != nil {
			return nil, errors.Wrap(err, "failed to load model.Client from database")
		}
		return &r, nil
	}, cache.WithExpires(time.Hour))
	if pdebug.Enabled {
		cacheSt := `HIT`
		if cacheMiss {
			cacheSt = `MISS`
		}
		pdebug.Printf(`CACHE %s: %s`, cacheSt, key)
	}
	*m = r
	return nil
}

func (v *ClientSvc) Update(tx *db.Tx, vdb *db.Client) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("service.Client.Update (%s)", vdb.EID).BindError(&err)
		defer g.End()
	}

	if vdb.EID == `` {
		return errors.New("vdb.EID is required (did you forget to call vdb.Load(tx) before hand?)")
	}

	if err := vdb.Update(tx); err != nil {
		return errors.Wrap(err, `failed to update database`)
	}
	key := `api.Client.` + vdb.EID
	if pdebug.Enabled {
		pdebug.Printf(`CACHE DEL %s`, key)
	}
	c := Cache()
	cerr := c.Delete(key)
	if pdebug.Enabled {
		if cerr != nil {
			pdebug.Printf(`CACHE ERR: %%s`, cerr)
		}
	}
	return nil
}

func (v *ClientSvc) Delete(tx *db.Tx, id string) error {
	if pdebug.Enabled {
		g := pdebug.Marker("Client.Delete (%s)", id)
		defer g.End()
	}

	vdb := db.Client{EID: id}
	if err := vdb.Delete(tx); err != nil {
		return err
	}
	key := `api.Client.` + id
	c := Cache()
	c.Delete(key)
	if pdebug.Enabled {
		pdebug.Printf(`CACHE DEL %s`, key)
	}
	return nil
}
