package model

// Automatically generated by genmodel utility. DO NOT EDIT!

import (
	"encoding/json"
	"time"

	"github.com/builderscon/octav/octav/db"
	"github.com/builderscon/octav/octav/tools"
	"github.com/lestrrat/go-pdebug"
)

var _ = time.Time{}

type ConferenceSeriesL10N struct {
	ConferenceSeries
	L10N tools.LocalizedFields `json:"-"`
}
type ConferenceSeriesL10NList []ConferenceSeriesL10N

func (v ConferenceSeriesL10N) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal(v.ConferenceSeries)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, v.L10N)
}

func (v *ConferenceSeries) Load(tx *db.Tx, id string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("model.ConferenceSeries.Load %s", id).BindError(&err)
		defer g.End()
	}
	vdb := db.ConferenceSeries{}
	if err := vdb.LoadByEID(tx, id); err != nil {
		return err
	}

	if err := v.FromRow(vdb); err != nil {
		return err
	}
	return nil
}

func (v *ConferenceSeries) FromRow(vdb db.ConferenceSeries) error {
	v.ID = vdb.EID
	v.Slug = vdb.Slug
	v.Title = vdb.Title
	return nil
}

func (v *ConferenceSeries) ToRow(vdb *db.ConferenceSeries) error {
	vdb.EID = v.ID
	vdb.Slug = v.Slug
	vdb.Title = v.Title
	return nil
}

func (v ConferenceSeriesL10N) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "title"), nil
}

func (v ConferenceSeriesL10N) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "slug":
		return v.Slug, nil
	case "title":
		return v.Title, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v *ConferenceSeriesL10N) UnmarshalJSON(data []byte) error {
	var s ConferenceSeries
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	v.ConferenceSeries = s
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}

	if err := tools.ExtractL10NFields(m, &v.L10N, []string{"title"}); err != nil {
		return err
	}

	return nil
}

func (v *ConferenceSeriesL10N) LoadLocalizedFields(tx *db.Tx) error {
	ls, err := db.LoadLocalizedStringsForParent(tx, v.ConferenceSeries.ID, "ConferenceSeries")
	if err != nil {
		return err
	}

	if len(ls) > 0 {
		v.L10N = tools.LocalizedFields{}
		for _, l := range ls {
			v.L10N.Set(l.Language, l.Name, l.Localized)
		}
	}
	return nil
}
