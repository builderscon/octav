package model

// Automatically generated by gentransport utility. DO NOT EDIT!

import (
	"encoding/json"
	"github.com/pkg/errors"

	"github.com/lestrrat/go-urlenc"
)

func (r LookupConferenceComponentRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupConferenceComponentRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupConferenceComponentRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupConferenceComponentRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupConferenceComponentRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupConferenceComponentRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupSessionTypeRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupSessionTypeRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupSessionTypeRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupSessionTypeRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupSessionTypeRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupSessionTypeRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r AddSessionTypeRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["name"] = r.Name
	m["abstract"] = r.Abstract
	m["duration"] = r.Duration
	if r.SubmissionStart.Valid() {
		m["submission_start"] = r.SubmissionStart.Value()
	}
	if r.SubmissionEnd.Valid() {
		m["submission_end"] = r.SubmissionEnd.Value()
	}
	return m
}

func (r AddSessionTypeRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddSessionTypeRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddSessionTypeRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddSessionTypeRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for AddSessionTypeRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			r.Name = jv.(string)
			delete(m, "name")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "name"}, "failed to populate fields for AddSessionTypeRequest")
		}
	}
	if jv, ok := m["abstract"]; ok {
		switch jv.(type) {
		case string:
			r.Abstract = jv.(string)
			delete(m, "abstract")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "abstract"}, "failed to populate fields for AddSessionTypeRequest")
		}
	}
	if jv, ok := m["duration"]; ok {
		switch jv.(type) {
		case float64:
			r.Duration = int(jv.(float64))
			delete(m, "duration")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "duration"}, "failed to populate fields for AddSessionTypeRequest")
		}
	}
	if jv, ok := m["submission_start"]; ok {
		if err := r.SubmissionStart.Set(jv); err != nil {
			return errors.New("set field SubmissionStart failed: " + err.Error())
		}
		delete(m, "submission_start")
	}
	if jv, ok := m["submission_end"]; ok {
		if err := r.SubmissionEnd.Set(jv); err != nil {
			return errors.New("set field SubmissionEnd failed: " + err.Error())
		}
		delete(m, "submission_end")
	}
	return nil
}

func (r DeleteSessionTypeRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteSessionTypeRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteSessionTypeRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteSessionTypeRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteSessionTypeRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteSessionTypeRequest")
		}
	}
	return nil
}

func (r ListSessionTypesByConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListSessionTypesByConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListSessionTypesByConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListSessionTypesByConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListSessionTypesByConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListSessionTypesByConferenceRequest")
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r UpdateSessionTypeRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Abstract.Valid() {
		m["abstract"] = r.Abstract.Value()
	}
	if r.Duration.Valid() {
		m["duration"] = r.Duration.Value()
	}
	if r.IsDefault.Valid() {
		m["is_default"] = r.IsDefault.Value()
	}
	if r.SubmissionStart.Valid() {
		m["submission_start"] = r.SubmissionStart.Value()
	}
	if r.SubmissionEnd.Valid() {
		m["submission_end"] = r.SubmissionEnd.Value()
	}
	return m
}

func (r UpdateSessionTypeRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateSessionTypeRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateSessionTypeRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateSessionTypeRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateSessionTypeRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["abstract"]; ok {
		if err := r.Abstract.Set(jv); err != nil {
			return errors.New("set field Abstract failed: " + err.Error())
		}
		delete(m, "abstract")
	}
	if jv, ok := m["duration"]; ok {
		if err := r.Duration.Set(jv); err != nil {
			return errors.New("set field Duration failed: " + err.Error())
		}
		delete(m, "duration")
	}
	if jv, ok := m["is_default"]; ok {
		if err := r.IsDefault.Set(jv); err != nil {
			return errors.New("set field IsDefault failed: " + err.Error())
		}
		delete(m, "is_default")
	}
	if jv, ok := m["submission_start"]; ok {
		if err := r.SubmissionStart.Set(jv); err != nil {
			return errors.New("set field SubmissionStart failed: " + err.Error())
		}
		delete(m, "submission_start")
	}
	if jv, ok := m["submission_end"]; ok {
		if err := r.SubmissionEnd.Set(jv); err != nil {
			return errors.New("set field SubmissionEnd failed: " + err.Error())
		}
		delete(m, "submission_end")
	}
	return nil
}

func (r LookupConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupConferenceSeriesRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r CreateConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["sid"] = r.SessionID
	m["slug"] = r.Slug
	m["title"] = r.Title
	return m
}

func (r CreateConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["sid"]; ok {
		switch jv.(type) {
		case string:
			r.SessionID = jv.(string)
			delete(m, "sid")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "sid"}, "failed to populate fields for CreateConferenceSeriesRequest")
		}
	}
	if jv, ok := m["slug"]; ok {
		switch jv.(type) {
		case string:
			r.Slug = jv.(string)
			delete(m, "slug")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "slug"}, "failed to populate fields for CreateConferenceSeriesRequest")
		}
	}
	if jv, ok := m["title"]; ok {
		switch jv.(type) {
		case string:
			r.Title = jv.(string)
			delete(m, "title")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "title"}, "failed to populate fields for CreateConferenceSeriesRequest")
		}
	}
	return nil
}

func (r UpdateConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Slug.Valid() {
		m["slug"] = r.Slug.Value()
	}
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	return m
}

func (r UpdateConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateConferenceSeriesRequest")
		}
	}
	if jv, ok := m["slug"]; ok {
		if err := r.Slug.Set(jv); err != nil {
			return errors.New("set field Slug failed: " + err.Error())
		}
		delete(m, "slug")
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	return nil
}

func (r DeleteConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteConferenceSeriesRequest")
		}
	}
	return nil
}

func (r ListConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r AddConferenceSeriesAdminRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["series_id"] = r.SeriesID
	m["admin_id"] = r.AdminID
	return m
}

func (r AddConferenceSeriesAdminRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceSeriesAdminRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceSeriesAdminRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceSeriesAdminRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["series_id"]; ok {
		switch jv.(type) {
		case string:
			r.SeriesID = jv.(string)
			delete(m, "series_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "series_id"}, "failed to populate fields for AddConferenceSeriesAdminRequest")
		}
	}
	if jv, ok := m["admin_id"]; ok {
		switch jv.(type) {
		case string:
			r.AdminID = jv.(string)
			delete(m, "admin_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "admin_id"}, "failed to populate fields for AddConferenceSeriesAdminRequest")
		}
	}
	return nil
}

func (r CreateConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["title"] = r.Title
	if r.CFPLeadText.Valid() {
		m["cfp_lead_text"] = r.CFPLeadText.Value()
	}
	if r.CFPPreSubmitInstructions.Valid() {
		m["cfp_pre_submit_instructions"] = r.CFPPreSubmitInstructions.Value()
	}
	if r.CFPPostSubmitInstructions.Valid() {
		m["cfp_post_submit_instructions"] = r.CFPPostSubmitInstructions.Value()
	}
	if r.ContactInformation.Valid() {
		m["contact_information"] = r.ContactInformation.Value()
	}
	if r.Description.Valid() {
		m["description"] = r.Description.Value()
	}
	m["series_id"] = r.SeriesID
	if r.SubTitle.Valid() {
		m["sub_title"] = r.SubTitle.Value()
	}
	m["slug"] = r.Slug
	if r.Timezone.Valid() {
		m["timezone"] = r.Timezone.Value()
	}
	return m
}

func (r CreateConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r CreateConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *CreateConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["title"]; ok {
		switch jv.(type) {
		case string:
			r.Title = jv.(string)
			delete(m, "title")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "title"}, "failed to populate fields for CreateConferenceRequest")
		}
	}
	if jv, ok := m["cfp_lead_text"]; ok {
		if err := r.CFPLeadText.Set(jv); err != nil {
			return errors.New("set field CFPLeadText failed: " + err.Error())
		}
		delete(m, "cfp_lead_text")
	}
	if jv, ok := m["cfp_pre_submit_instructions"]; ok {
		if err := r.CFPPreSubmitInstructions.Set(jv); err != nil {
			return errors.New("set field CFPPreSubmitInstructions failed: " + err.Error())
		}
		delete(m, "cfp_pre_submit_instructions")
	}
	if jv, ok := m["cfp_post_submit_instructions"]; ok {
		if err := r.CFPPostSubmitInstructions.Set(jv); err != nil {
			return errors.New("set field CFPPostSubmitInstructions failed: " + err.Error())
		}
		delete(m, "cfp_post_submit_instructions")
	}
	if jv, ok := m["contact_information"]; ok {
		if err := r.ContactInformation.Set(jv); err != nil {
			return errors.New("set field ContactInformation failed: " + err.Error())
		}
		delete(m, "contact_information")
	}
	if jv, ok := m["description"]; ok {
		if err := r.Description.Set(jv); err != nil {
			return errors.New("set field Description failed: " + err.Error())
		}
		delete(m, "description")
	}
	if jv, ok := m["series_id"]; ok {
		switch jv.(type) {
		case string:
			r.SeriesID = jv.(string)
			delete(m, "series_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "series_id"}, "failed to populate fields for CreateConferenceRequest")
		}
	}
	if jv, ok := m["sub_title"]; ok {
		if err := r.SubTitle.Set(jv); err != nil {
			return errors.New("set field SubTitle failed: " + err.Error())
		}
		delete(m, "sub_title")
	}
	if jv, ok := m["slug"]; ok {
		switch jv.(type) {
		case string:
			r.Slug = jv.(string)
			delete(m, "slug")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "slug"}, "failed to populate fields for CreateConferenceRequest")
		}
	}
	if jv, ok := m["timezone"]; ok {
		if err := r.Timezone.Set(jv); err != nil {
			return errors.New("set field Timezone failed: " + err.Error())
		}
		delete(m, "timezone")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"title", "cfp_lead_text", "cfp_pre_submit_instructions", "cfp_post_submit_instructions", "contact_information", "description", "sub_title"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateConferenceRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "title", "cfp_lead_text", "cfp_pre_submit_instructions", "cfp_post_submit_instructions", "contact_information", "description", "series_id", "sub_title", "slug", "timezone"), nil
}

func (r *CreateConferenceRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "title":
		if jv, ok := v.(string); ok {
			r.Title = jv
			return nil
		}
	case "cfp_lead_text":
		return r.CFPLeadText.Set(v)
	case "cfp_pre_submit_instructions":
		return r.CFPPreSubmitInstructions.Set(v)
	case "cfp_post_submit_instructions":
		return r.CFPPostSubmitInstructions.Set(v)
	case "contact_information":
		return r.ContactInformation.Set(v)
	case "description":
		return r.Description.Set(v)
	case "series_id":
		if jv, ok := v.(string); ok {
			r.SeriesID = jv
			return nil
		}
	case "sub_title":
		return r.SubTitle.Set(v)
	case "slug":
		if jv, ok := v.(string); ok {
			r.Slug = jv
			return nil
		}
	case "timezone":
		return r.Timezone.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupConferenceRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupConferenceBySlugRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["slug"] = r.Slug
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupConferenceBySlugRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupConferenceBySlugRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupConferenceBySlugRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupConferenceBySlugRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["slug"]; ok {
		switch jv.(type) {
		case string:
			r.Slug = jv.(string)
			delete(m, "slug")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "slug"}, "failed to populate fields for LookupConferenceBySlugRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r UpdateConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.Description.Valid() {
		m["description"] = r.Description.Value()
	}
	if r.CFPLeadText.Valid() {
		m["cfp_lead_text"] = r.CFPLeadText.Value()
	}
	if r.CFPPreSubmitInstructions.Valid() {
		m["cfp_pre_submit_instructions"] = r.CFPPreSubmitInstructions.Value()
	}
	if r.CFPPostSubmitInstructions.Valid() {
		m["cfp_post_submit_instructions"] = r.CFPPostSubmitInstructions.Value()
	}
	if r.ContactInformation.Valid() {
		m["contact_information"] = r.ContactInformation.Value()
	}
	if r.RedirectURL.Valid() {
		m["redirect_url"] = r.RedirectURL.Value()
	}
	if r.SeriesID.Valid() {
		m["series_id"] = r.SeriesID.Value()
	}
	if r.Slug.Valid() {
		m["slug"] = r.Slug.Value()
	}
	if r.SubTitle.Valid() {
		m["sub_title"] = r.SubTitle.Value()
	}
	if r.Status.Valid() {
		m["status"] = r.Status.Value()
	}
	if r.BlogFeedbackAvailable.Valid() {
		m["blog_feedback_available"] = r.BlogFeedbackAvailable.Value()
	}
	if r.TimetableAvailable.Valid() {
		m["timetable_available"] = r.TimetableAvailable.Value()
	}
	if r.Timezone.Valid() {
		m["timezone"] = r.Timezone.Value()
	}
	return m
}

func (r UpdateConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateConferenceRequest")
		}
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["description"]; ok {
		if err := r.Description.Set(jv); err != nil {
			return errors.New("set field Description failed: " + err.Error())
		}
		delete(m, "description")
	}
	if jv, ok := m["cfp_lead_text"]; ok {
		if err := r.CFPLeadText.Set(jv); err != nil {
			return errors.New("set field CFPLeadText failed: " + err.Error())
		}
		delete(m, "cfp_lead_text")
	}
	if jv, ok := m["cfp_pre_submit_instructions"]; ok {
		if err := r.CFPPreSubmitInstructions.Set(jv); err != nil {
			return errors.New("set field CFPPreSubmitInstructions failed: " + err.Error())
		}
		delete(m, "cfp_pre_submit_instructions")
	}
	if jv, ok := m["cfp_post_submit_instructions"]; ok {
		if err := r.CFPPostSubmitInstructions.Set(jv); err != nil {
			return errors.New("set field CFPPostSubmitInstructions failed: " + err.Error())
		}
		delete(m, "cfp_post_submit_instructions")
	}
	if jv, ok := m["contact_information"]; ok {
		if err := r.ContactInformation.Set(jv); err != nil {
			return errors.New("set field ContactInformation failed: " + err.Error())
		}
		delete(m, "contact_information")
	}
	if jv, ok := m["redirect_url"]; ok {
		if err := r.RedirectURL.Set(jv); err != nil {
			return errors.New("set field RedirectURL failed: " + err.Error())
		}
		delete(m, "redirect_url")
	}
	if jv, ok := m["series_id"]; ok {
		if err := r.SeriesID.Set(jv); err != nil {
			return errors.New("set field SeriesID failed: " + err.Error())
		}
		delete(m, "series_id")
	}
	if jv, ok := m["slug"]; ok {
		if err := r.Slug.Set(jv); err != nil {
			return errors.New("set field Slug failed: " + err.Error())
		}
		delete(m, "slug")
	}
	if jv, ok := m["sub_title"]; ok {
		if err := r.SubTitle.Set(jv); err != nil {
			return errors.New("set field SubTitle failed: " + err.Error())
		}
		delete(m, "sub_title")
	}
	if jv, ok := m["status"]; ok {
		if err := r.Status.Set(jv); err != nil {
			return errors.New("set field Status failed: " + err.Error())
		}
		delete(m, "status")
	}
	if jv, ok := m["blog_feedback_available"]; ok {
		if err := r.BlogFeedbackAvailable.Set(jv); err != nil {
			return errors.New("set field BlogFeedbackAvailable failed: " + err.Error())
		}
		delete(m, "blog_feedback_available")
	}
	if jv, ok := m["timetable_available"]; ok {
		if err := r.TimetableAvailable.Set(jv); err != nil {
			return errors.New("set field TimetableAvailable failed: " + err.Error())
		}
		delete(m, "timetable_available")
	}
	if jv, ok := m["timezone"]; ok {
		if err := r.Timezone.Set(jv); err != nil {
			return errors.New("set field Timezone failed: " + err.Error())
		}
		delete(m, "timezone")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"title", "description", "cfp_lead_text", "cfp_pre_submit_instructions", "cfp_post_submit_instructions", "contact_information", "sub_title"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateConferenceRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "title", "description", "cfp_lead_text", "cfp_pre_submit_instructions", "cfp_post_submit_instructions", "contact_information", "redirect_url", "series_id", "slug", "sub_title", "status", "blog_feedback_available", "timetable_available", "timezone"), nil
}

func (r *UpdateConferenceRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "title":
		return r.Title.Set(v)
	case "description":
		return r.Description.Set(v)
	case "cfp_lead_text":
		return r.CFPLeadText.Set(v)
	case "cfp_pre_submit_instructions":
		return r.CFPPreSubmitInstructions.Set(v)
	case "cfp_post_submit_instructions":
		return r.CFPPostSubmitInstructions.Set(v)
	case "contact_information":
		return r.ContactInformation.Set(v)
	case "redirect_url":
		return r.RedirectURL.Set(v)
	case "series_id":
		return r.SeriesID.Set(v)
	case "slug":
		return r.Slug.Set(v)
	case "sub_title":
		return r.SubTitle.Set(v)
	case "status":
		return r.Status.Set(v)
	case "blog_feedback_available":
		return r.BlogFeedbackAvailable.Set(v)
	case "timetable_available":
		return r.TimetableAvailable.Set(v)
	case "timezone":
		return r.Timezone.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r ListConferenceDateRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	return m
}

func (r ListConferenceDateRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceDateRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceDateRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceDateRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListConferenceDateRequest")
		}
	}
	return nil
}

func (r CreateConferenceDateRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["date"] = r.Date
	return m
}

func (r CreateConferenceDateRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateConferenceDateRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateConferenceDateRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateConferenceDateRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for CreateConferenceDateRequest")
		}
	}
	if jv, ok := m["date"]; ok {
		if err := r.Date.Extract(jv); err != nil {
			return errors.New("extract field Date failed: " + err.Error())
		}
		delete(m, "date")
	}
	return nil
}

func (r ListConferenceAdminRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListConferenceAdminRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceAdminRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceAdminRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceAdminRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListConferenceAdminRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r AddConferenceAdminRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["admin_id"] = r.AdminID
	return m
}

func (r AddConferenceAdminRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceAdminRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceAdminRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceAdminRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for AddConferenceAdminRequest")
		}
	}
	if jv, ok := m["admin_id"]; ok {
		switch jv.(type) {
		case string:
			r.AdminID = jv.(string)
			delete(m, "admin_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "admin_id"}, "failed to populate fields for AddConferenceAdminRequest")
		}
	}
	return nil
}

func (r AddConferenceVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["venue_id"] = r.VenueID
	return m
}

func (r AddConferenceVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for AddConferenceVenueRequest")
		}
	}
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "venue_id"}, "failed to populate fields for AddConferenceVenueRequest")
		}
	}
	return nil
}

func (r DeleteConferenceDateRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["date"] = r.Date
	return m
}

func (r DeleteConferenceDateRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceDateRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceDateRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceDateRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for DeleteConferenceDateRequest")
		}
	}
	if jv, ok := m["date"]; ok {
		switch jv.(type) {
		case string:
			r.Date = jv.(string)
			delete(m, "date")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "date"}, "failed to populate fields for DeleteConferenceDateRequest")
		}
	}
	return nil
}

func (r DeleteConferenceAdminRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["admin_id"] = r.AdminID
	return m
}

func (r DeleteConferenceAdminRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceAdminRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceAdminRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceAdminRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for DeleteConferenceAdminRequest")
		}
	}
	if jv, ok := m["admin_id"]; ok {
		switch jv.(type) {
		case string:
			r.AdminID = jv.(string)
			delete(m, "admin_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "admin_id"}, "failed to populate fields for DeleteConferenceAdminRequest")
		}
	}
	return nil
}

func (r DeleteConferenceVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["venue_id"] = r.VenueID
	return m
}

func (r DeleteConferenceVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for DeleteConferenceVenueRequest")
		}
	}
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "venue_id"}, "failed to populate fields for DeleteConferenceVenueRequest")
		}
	}
	return nil
}

func (r DeleteConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteConferenceRequest")
		}
	}
	return nil
}

func (r AddVenueRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["venue_id"] = r.VenueID
	m["room_id"] = r.RoomID
	return m
}

func (r AddVenueRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddVenueRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddVenueRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddVenueRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "venue_id"}, "failed to populate fields for AddVenueRoomRequest")
		}
	}
	if jv, ok := m["room_id"]; ok {
		switch jv.(type) {
		case string:
			r.RoomID = jv.(string)
			delete(m, "room_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "room_id"}, "failed to populate fields for AddVenueRoomRequest")
		}
	}
	return nil
}

func (r DeleteVenueRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["venue_id"] = r.VenueID
	m["room_id"] = r.RoomID
	return m
}

func (r DeleteVenueRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteVenueRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteVenueRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteVenueRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "venue_id"}, "failed to populate fields for DeleteVenueRoomRequest")
		}
	}
	if jv, ok := m["room_id"]; ok {
		switch jv.(type) {
		case string:
			r.RoomID = jv.(string)
			delete(m, "room_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "room_id"}, "failed to populate fields for DeleteVenueRoomRequest")
		}
	}
	return nil
}

func (r ListConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["organizers"] = r.Organizers
	if r.RangeEnd.Valid() {
		m["range_end"] = r.RangeEnd.Value()
	}
	if r.RangeStart.Valid() {
		m["range_start"] = r.RangeStart.Value()
	}
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	m["status"] = r.Status
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["organizers"]; ok {
		switch jv.(type) {
		case []interface{}:
			jvl := jv.([]interface{})
			list := make([]string, len(jvl))
			for i, el := range jvl {
				switch el.(type) {
				case string:
					list[i] = el.(string)
				default:
					return errors.Wrap(ErrInvalidJSONFieldType{Field: "organizers"}, "failed to populate fields for ListConferenceRequest")
				}
			}
			r.Organizers = list
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "organizers"}, "failed to populate fields for ListConferenceRequest")
		}
	}
	if jv, ok := m["range_end"]; ok {
		if err := r.RangeEnd.Set(jv); err != nil {
			return errors.New("set field RangeEnd failed: " + err.Error())
		}
		delete(m, "range_end")
	}
	if jv, ok := m["range_start"]; ok {
		if err := r.RangeStart.Set(jv); err != nil {
			return errors.New("set field RangeStart failed: " + err.Error())
		}
		delete(m, "range_start")
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["status"]; ok {
		switch jv.(type) {
		case []interface{}:
			jvl := jv.([]interface{})
			list := make([]string, len(jvl))
			for i, el := range jvl {
				switch el.(type) {
				case string:
					list[i] = el.(string)
				default:
					return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListConferenceRequest")
				}
			}
			r.Status = list
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListConferenceRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.VenueID.Valid() {
		m["venue_id"] = r.VenueID.Value()
	}
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Capacity.Valid() {
		m["capacity"] = r.Capacity.Value()
	}
	return m
}

func (r CreateRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r CreateRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *CreateRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		if err := r.VenueID.Set(jv); err != nil {
			return errors.New("set field VenueID failed: " + err.Error())
		}
		delete(m, "venue_id")
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["capacity"]; ok {
		if err := r.Capacity.Set(jv); err != nil {
			return errors.New("set field Capacity failed: " + err.Error())
		}
		delete(m, "capacity")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateRoomRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "venue_id", "name", "capacity"), nil
}

func (r *CreateRoomRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "venue_id":
		return r.VenueID.Set(v)
	case "name":
		return r.Name.Set(v)
	case "capacity":
		return r.Capacity.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupRoomRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r UpdateRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.VenueID.Valid() {
		m["venue_id"] = r.VenueID.Value()
	}
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Capacity.Valid() {
		m["capacity"] = r.Capacity.Value()
	}
	return m
}

func (r UpdateRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateRoomRequest")
		}
	}
	if jv, ok := m["venue_id"]; ok {
		if err := r.VenueID.Set(jv); err != nil {
			return errors.New("set field VenueID failed: " + err.Error())
		}
		delete(m, "venue_id")
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["capacity"]; ok {
		if err := r.Capacity.Set(jv); err != nil {
			return errors.New("set field Capacity failed: " + err.Error())
		}
		delete(m, "capacity")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateRoomRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "venue_id", "name", "capacity"), nil
}

func (r *UpdateRoomRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "venue_id":
		return r.VenueID.Set(v)
	case "name":
		return r.Name.Set(v)
	case "capacity":
		return r.Capacity.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteRoomRequest")
		}
	}
	return nil
}

func (r ListRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["venue_id"] = r.VenueID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "venue_id"}, "failed to populate fields for ListRoomRequest")
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	m["session_type_id"] = r.SessionTypeID
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.Abstract.Valid() {
		m["abstract"] = r.Abstract.Value()
	}
	if r.Memo.Valid() {
		m["memo"] = r.Memo.Value()
	}
	if r.MaterialLevel.Valid() {
		m["material_level"] = r.MaterialLevel.Value()
	}
	if r.Tags.Valid() {
		m["tags"] = r.Tags.Value()
	}
	if r.Category.Valid() {
		m["category"] = r.Category.Value()
	}
	if r.SpokenLanguage.Valid() {
		m["spoken_language"] = r.SpokenLanguage.Value()
	}
	if r.SlideLanguage.Valid() {
		m["slide_language"] = r.SlideLanguage.Value()
	}
	if r.SlideSubtitles.Valid() {
		m["slide_subtitles"] = r.SlideSubtitles.Value()
	}
	if r.SlideURL.Valid() {
		m["slide_url"] = r.SlideURL.Value()
	}
	if r.VideoURL.Valid() {
		m["video_url"] = r.VideoURL.Value()
	}
	if r.PhotoRelease.Valid() {
		m["photo_release"] = r.PhotoRelease.Value()
	}
	if r.RecordingRelease.Valid() {
		m["recording_release"] = r.RecordingRelease.Value()
	}
	if r.MaterialsRelease.Valid() {
		m["materials_release"] = r.MaterialsRelease.Value()
	}
	return m
}

func (r CreateSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r CreateSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *CreateSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for CreateSessionRequest")
		}
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["session_type_id"]; ok {
		switch jv.(type) {
		case string:
			r.SessionTypeID = jv.(string)
			delete(m, "session_type_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "session_type_id"}, "failed to populate fields for CreateSessionRequest")
		}
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["abstract"]; ok {
		if err := r.Abstract.Set(jv); err != nil {
			return errors.New("set field Abstract failed: " + err.Error())
		}
		delete(m, "abstract")
	}
	if jv, ok := m["memo"]; ok {
		if err := r.Memo.Set(jv); err != nil {
			return errors.New("set field Memo failed: " + err.Error())
		}
		delete(m, "memo")
	}
	if jv, ok := m["material_level"]; ok {
		if err := r.MaterialLevel.Set(jv); err != nil {
			return errors.New("set field MaterialLevel failed: " + err.Error())
		}
		delete(m, "material_level")
	}
	if jv, ok := m["tags"]; ok {
		if err := r.Tags.Set(jv); err != nil {
			return errors.New("set field Tags failed: " + err.Error())
		}
		delete(m, "tags")
	}
	if jv, ok := m["category"]; ok {
		if err := r.Category.Set(jv); err != nil {
			return errors.New("set field Category failed: " + err.Error())
		}
		delete(m, "category")
	}
	if jv, ok := m["spoken_language"]; ok {
		if err := r.SpokenLanguage.Set(jv); err != nil {
			return errors.New("set field SpokenLanguage failed: " + err.Error())
		}
		delete(m, "spoken_language")
	}
	if jv, ok := m["slide_language"]; ok {
		if err := r.SlideLanguage.Set(jv); err != nil {
			return errors.New("set field SlideLanguage failed: " + err.Error())
		}
		delete(m, "slide_language")
	}
	if jv, ok := m["slide_subtitles"]; ok {
		if err := r.SlideSubtitles.Set(jv); err != nil {
			return errors.New("set field SlideSubtitles failed: " + err.Error())
		}
		delete(m, "slide_subtitles")
	}
	if jv, ok := m["slide_url"]; ok {
		if err := r.SlideURL.Set(jv); err != nil {
			return errors.New("set field SlideURL failed: " + err.Error())
		}
		delete(m, "slide_url")
	}
	if jv, ok := m["video_url"]; ok {
		if err := r.VideoURL.Set(jv); err != nil {
			return errors.New("set field VideoURL failed: " + err.Error())
		}
		delete(m, "video_url")
	}
	if jv, ok := m["photo_release"]; ok {
		if err := r.PhotoRelease.Set(jv); err != nil {
			return errors.New("set field PhotoRelease failed: " + err.Error())
		}
		delete(m, "photo_release")
	}
	if jv, ok := m["recording_release"]; ok {
		if err := r.RecordingRelease.Set(jv); err != nil {
			return errors.New("set field RecordingRelease failed: " + err.Error())
		}
		delete(m, "recording_release")
	}
	if jv, ok := m["materials_release"]; ok {
		if err := r.MaterialsRelease.Set(jv); err != nil {
			return errors.New("set field MaterialsRelease failed: " + err.Error())
		}
		delete(m, "materials_release")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"title", "abstract"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateSessionRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "conference_id", "speaker_id", "session_type_id", "title", "abstract", "memo", "material_level", "tags", "category", "spoken_language", "slide_language", "slide_subtitles", "slide_url", "video_url", "photo_release", "recording_release", "materials_release"), nil
}

func (r *CreateSessionRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		if jv, ok := v.(string); ok {
			r.ConferenceID = jv
			return nil
		}
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "session_type_id":
		if jv, ok := v.(string); ok {
			r.SessionTypeID = jv
			return nil
		}
	case "title":
		return r.Title.Set(v)
	case "abstract":
		return r.Abstract.Set(v)
	case "memo":
		return r.Memo.Set(v)
	case "material_level":
		return r.MaterialLevel.Set(v)
	case "tags":
		return r.Tags.Set(v)
	case "category":
		return r.Category.Set(v)
	case "spoken_language":
		return r.SpokenLanguage.Set(v)
	case "slide_language":
		return r.SlideLanguage.Set(v)
	case "slide_subtitles":
		return r.SlideSubtitles.Set(v)
	case "slide_url":
		return r.SlideURL.Set(v)
	case "video_url":
		return r.VideoURL.Set(v)
	case "photo_release":
		return r.PhotoRelease.Set(v)
	case "recording_release":
		return r.RecordingRelease.Set(v)
	case "materials_release":
		return r.MaterialsRelease.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupSessionRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r UpdateSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.ConferenceID.Valid() {
		m["conference_id"] = r.ConferenceID.Value()
	}
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	if r.SessionTypeID.Valid() {
		m["session_type_id"] = r.SessionTypeID.Value()
	}
	if r.RoomID.Valid() {
		m["room_id"] = r.RoomID.Value()
	}
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.Abstract.Valid() {
		m["abstract"] = r.Abstract.Value()
	}
	if r.Memo.Valid() {
		m["memo"] = r.Memo.Value()
	}
	if r.Duration.Valid() {
		m["duration"] = r.Duration.Value()
	}
	if r.MaterialLevel.Valid() {
		m["material_level"] = r.MaterialLevel.Value()
	}
	if r.Tags.Valid() {
		m["tags"] = r.Tags.Value()
	}
	if r.Category.Valid() {
		m["category"] = r.Category.Value()
	}
	if r.SpokenLanguage.Valid() {
		m["spoken_language"] = r.SpokenLanguage.Value()
	}
	if r.SlideLanguage.Valid() {
		m["slide_language"] = r.SlideLanguage.Value()
	}
	if r.SlideSubtitles.Valid() {
		m["slide_subtitles"] = r.SlideSubtitles.Value()
	}
	if r.SlideURL.Valid() {
		m["slide_url"] = r.SlideURL.Value()
	}
	if r.VideoURL.Valid() {
		m["video_url"] = r.VideoURL.Value()
	}
	if r.PhotoRelease.Valid() {
		m["photo_release"] = r.PhotoRelease.Value()
	}
	if r.RecordingRelease.Valid() {
		m["recording_release"] = r.RecordingRelease.Value()
	}
	if r.MaterialsRelease.Valid() {
		m["materials_release"] = r.MaterialsRelease.Value()
	}
	if r.SortOrder.Valid() {
		m["sort_order"] = r.SortOrder.Value()
	}
	if r.HasInterpretation.Valid() {
		m["has_interpretation"] = r.HasInterpretation.Value()
	}
	if r.SelectionResultSent.Valid() {
		m["selection_result_sent"] = r.SelectionResultSent.Value()
	}
	if r.Status.Valid() {
		m["status"] = r.Status.Value()
	}
	if r.StartsOn.Valid() {
		m["starts_on"] = r.StartsOn.Value()
	}
	if r.Confirmed.Valid() {
		m["confirmed"] = r.Confirmed.Value()
	}
	return m
}

func (r UpdateSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateSessionRequest")
		}
	}
	if jv, ok := m["conference_id"]; ok {
		if err := r.ConferenceID.Set(jv); err != nil {
			return errors.New("set field ConferenceID failed: " + err.Error())
		}
		delete(m, "conference_id")
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["session_type_id"]; ok {
		if err := r.SessionTypeID.Set(jv); err != nil {
			return errors.New("set field SessionTypeID failed: " + err.Error())
		}
		delete(m, "session_type_id")
	}
	if jv, ok := m["room_id"]; ok {
		if err := r.RoomID.Set(jv); err != nil {
			return errors.New("set field RoomID failed: " + err.Error())
		}
		delete(m, "room_id")
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["abstract"]; ok {
		if err := r.Abstract.Set(jv); err != nil {
			return errors.New("set field Abstract failed: " + err.Error())
		}
		delete(m, "abstract")
	}
	if jv, ok := m["memo"]; ok {
		if err := r.Memo.Set(jv); err != nil {
			return errors.New("set field Memo failed: " + err.Error())
		}
		delete(m, "memo")
	}
	if jv, ok := m["duration"]; ok {
		if err := r.Duration.Set(jv); err != nil {
			return errors.New("set field Duration failed: " + err.Error())
		}
		delete(m, "duration")
	}
	if jv, ok := m["material_level"]; ok {
		if err := r.MaterialLevel.Set(jv); err != nil {
			return errors.New("set field MaterialLevel failed: " + err.Error())
		}
		delete(m, "material_level")
	}
	if jv, ok := m["tags"]; ok {
		if err := r.Tags.Set(jv); err != nil {
			return errors.New("set field Tags failed: " + err.Error())
		}
		delete(m, "tags")
	}
	if jv, ok := m["category"]; ok {
		if err := r.Category.Set(jv); err != nil {
			return errors.New("set field Category failed: " + err.Error())
		}
		delete(m, "category")
	}
	if jv, ok := m["spoken_language"]; ok {
		if err := r.SpokenLanguage.Set(jv); err != nil {
			return errors.New("set field SpokenLanguage failed: " + err.Error())
		}
		delete(m, "spoken_language")
	}
	if jv, ok := m["slide_language"]; ok {
		if err := r.SlideLanguage.Set(jv); err != nil {
			return errors.New("set field SlideLanguage failed: " + err.Error())
		}
		delete(m, "slide_language")
	}
	if jv, ok := m["slide_subtitles"]; ok {
		if err := r.SlideSubtitles.Set(jv); err != nil {
			return errors.New("set field SlideSubtitles failed: " + err.Error())
		}
		delete(m, "slide_subtitles")
	}
	if jv, ok := m["slide_url"]; ok {
		if err := r.SlideURL.Set(jv); err != nil {
			return errors.New("set field SlideURL failed: " + err.Error())
		}
		delete(m, "slide_url")
	}
	if jv, ok := m["video_url"]; ok {
		if err := r.VideoURL.Set(jv); err != nil {
			return errors.New("set field VideoURL failed: " + err.Error())
		}
		delete(m, "video_url")
	}
	if jv, ok := m["photo_release"]; ok {
		if err := r.PhotoRelease.Set(jv); err != nil {
			return errors.New("set field PhotoRelease failed: " + err.Error())
		}
		delete(m, "photo_release")
	}
	if jv, ok := m["recording_release"]; ok {
		if err := r.RecordingRelease.Set(jv); err != nil {
			return errors.New("set field RecordingRelease failed: " + err.Error())
		}
		delete(m, "recording_release")
	}
	if jv, ok := m["materials_release"]; ok {
		if err := r.MaterialsRelease.Set(jv); err != nil {
			return errors.New("set field MaterialsRelease failed: " + err.Error())
		}
		delete(m, "materials_release")
	}
	if jv, ok := m["sort_order"]; ok {
		if err := r.SortOrder.Set(jv); err != nil {
			return errors.New("set field SortOrder failed: " + err.Error())
		}
		delete(m, "sort_order")
	}
	if jv, ok := m["has_interpretation"]; ok {
		if err := r.HasInterpretation.Set(jv); err != nil {
			return errors.New("set field HasInterpretation failed: " + err.Error())
		}
		delete(m, "has_interpretation")
	}
	if jv, ok := m["selection_result_sent"]; ok {
		if err := r.SelectionResultSent.Set(jv); err != nil {
			return errors.New("set field SelectionResultSent failed: " + err.Error())
		}
		delete(m, "selection_result_sent")
	}
	if jv, ok := m["status"]; ok {
		if err := r.Status.Set(jv); err != nil {
			return errors.New("set field Status failed: " + err.Error())
		}
		delete(m, "status")
	}
	if jv, ok := m["starts_on"]; ok {
		if err := r.StartsOn.Set(jv); err != nil {
			return errors.New("set field StartsOn failed: " + err.Error())
		}
		delete(m, "starts_on")
	}
	if jv, ok := m["confirmed"]; ok {
		if err := r.Confirmed.Set(jv); err != nil {
			return errors.New("set field Confirmed failed: " + err.Error())
		}
		delete(m, "confirmed")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"title", "abstract"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateSessionRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "conference_id", "speaker_id", "session_type_id", "room_id", "title", "abstract", "memo", "duration", "material_level", "tags", "category", "spoken_language", "slide_language", "slide_subtitles", "slide_url", "video_url", "photo_release", "recording_release", "materials_release", "sort_order", "has_interpretation", "selection_result_sent", "status", "starts_on", "confirmed"), nil
}

func (r *UpdateSessionRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "conference_id":
		return r.ConferenceID.Set(v)
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "session_type_id":
		return r.SessionTypeID.Set(v)
	case "room_id":
		return r.RoomID.Set(v)
	case "title":
		return r.Title.Set(v)
	case "abstract":
		return r.Abstract.Set(v)
	case "memo":
		return r.Memo.Set(v)
	case "duration":
		return r.Duration.Set(v)
	case "material_level":
		return r.MaterialLevel.Set(v)
	case "tags":
		return r.Tags.Set(v)
	case "category":
		return r.Category.Set(v)
	case "spoken_language":
		return r.SpokenLanguage.Set(v)
	case "slide_language":
		return r.SlideLanguage.Set(v)
	case "slide_subtitles":
		return r.SlideSubtitles.Set(v)
	case "slide_url":
		return r.SlideURL.Set(v)
	case "video_url":
		return r.VideoURL.Set(v)
	case "photo_release":
		return r.PhotoRelease.Set(v)
	case "recording_release":
		return r.RecordingRelease.Set(v)
	case "materials_release":
		return r.MaterialsRelease.Set(v)
	case "sort_order":
		return r.SortOrder.Set(v)
	case "has_interpretation":
		return r.HasInterpretation.Set(v)
	case "selection_result_sent":
		return r.SelectionResultSent.Set(v)
	case "status":
		return r.Status.Set(v)
	case "starts_on":
		return r.StartsOn.Set(v)
	case "confirmed":
		return r.Confirmed.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteSessionRequest")
		}
	}
	return nil
}

func (r CreateUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.FirstName.Valid() {
		m["first_name"] = r.FirstName.Value()
	}
	if r.LastName.Valid() {
		m["last_name"] = r.LastName.Value()
	}
	m["nickname"] = r.Nickname
	if r.Email.Valid() {
		m["email"] = r.Email.Value()
	}
	m["auth_via"] = r.AuthVia
	m["auth_user_id"] = r.AuthUserID
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	if r.TshirtSize.Valid() {
		m["tshirt_size"] = r.TshirtSize.Value()
	}
	return m
}

func (r CreateUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r CreateUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *CreateUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["first_name"]; ok {
		if err := r.FirstName.Set(jv); err != nil {
			return errors.New("set field FirstName failed: " + err.Error())
		}
		delete(m, "first_name")
	}
	if jv, ok := m["last_name"]; ok {
		if err := r.LastName.Set(jv); err != nil {
			return errors.New("set field LastName failed: " + err.Error())
		}
		delete(m, "last_name")
	}
	if jv, ok := m["nickname"]; ok {
		switch jv.(type) {
		case string:
			r.Nickname = jv.(string)
			delete(m, "nickname")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "nickname"}, "failed to populate fields for CreateUserRequest")
		}
	}
	if jv, ok := m["email"]; ok {
		if err := r.Email.Set(jv); err != nil {
			return errors.New("set field Email failed: " + err.Error())
		}
		delete(m, "email")
	}
	if jv, ok := m["auth_via"]; ok {
		switch jv.(type) {
		case string:
			r.AuthVia = jv.(string)
			delete(m, "auth_via")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "auth_via"}, "failed to populate fields for CreateUserRequest")
		}
	}
	if jv, ok := m["auth_user_id"]; ok {
		switch jv.(type) {
		case string:
			r.AuthUserID = jv.(string)
			delete(m, "auth_user_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "auth_user_id"}, "failed to populate fields for CreateUserRequest")
		}
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["tshirt_size"]; ok {
		if err := r.TshirtSize.Set(jv); err != nil {
			return errors.New("set field TshirtSize failed: " + err.Error())
		}
		delete(m, "tshirt_size")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"first_name", "last_name"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateUserRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "first_name", "last_name", "nickname", "email", "auth_via", "auth_user_id", "avatar_url", "tshirt_size"), nil
}

func (r *CreateUserRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "first_name":
		return r.FirstName.Set(v)
	case "last_name":
		return r.LastName.Set(v)
	case "nickname":
		if jv, ok := v.(string); ok {
			r.Nickname = jv
			return nil
		}
	case "email":
		return r.Email.Set(v)
	case "auth_via":
		if jv, ok := v.(string); ok {
			r.AuthVia = jv
			return nil
		}
	case "auth_user_id":
		if jv, ok := v.(string); ok {
			r.AuthUserID = jv
			return nil
		}
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "tshirt_size":
		return r.TshirtSize.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.FirstName.Valid() {
		m["first_name"] = r.FirstName.Value()
	}
	if r.LastName.Valid() {
		m["last_name"] = r.LastName.Value()
	}
	if r.Nickname.Valid() {
		m["nickname"] = r.Nickname.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Email.Valid() {
		m["email"] = r.Email.Value()
	}
	if r.AuthVia.Valid() {
		m["auth_via"] = r.AuthVia.Value()
	}
	if r.AuthUserID.Valid() {
		m["auth_user_id"] = r.AuthUserID.Value()
	}
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	if r.TshirtSize.Valid() {
		m["tshirt_size"] = r.TshirtSize.Value()
	}
	return m
}

func (r UpdateUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateUserRequest")
		}
	}
	if jv, ok := m["first_name"]; ok {
		if err := r.FirstName.Set(jv); err != nil {
			return errors.New("set field FirstName failed: " + err.Error())
		}
		delete(m, "first_name")
	}
	if jv, ok := m["last_name"]; ok {
		if err := r.LastName.Set(jv); err != nil {
			return errors.New("set field LastName failed: " + err.Error())
		}
		delete(m, "last_name")
	}
	if jv, ok := m["nickname"]; ok {
		if err := r.Nickname.Set(jv); err != nil {
			return errors.New("set field Nickname failed: " + err.Error())
		}
		delete(m, "nickname")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["email"]; ok {
		if err := r.Email.Set(jv); err != nil {
			return errors.New("set field Email failed: " + err.Error())
		}
		delete(m, "email")
	}
	if jv, ok := m["auth_via"]; ok {
		if err := r.AuthVia.Set(jv); err != nil {
			return errors.New("set field AuthVia failed: " + err.Error())
		}
		delete(m, "auth_via")
	}
	if jv, ok := m["auth_user_id"]; ok {
		if err := r.AuthUserID.Set(jv); err != nil {
			return errors.New("set field AuthUserID failed: " + err.Error())
		}
		delete(m, "auth_user_id")
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["tshirt_size"]; ok {
		if err := r.TshirtSize.Set(jv); err != nil {
			return errors.New("set field TshirtSize failed: " + err.Error())
		}
		delete(m, "tshirt_size")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"first_name", "last_name"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateUserRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "first_name", "last_name", "nickname", "lang", "email", "auth_via", "auth_user_id", "avatar_url", "tshirt_size"), nil
}

func (r *UpdateUserRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "first_name":
		return r.FirstName.Set(v)
	case "last_name":
		return r.LastName.Set(v)
	case "nickname":
		return r.Nickname.Set(v)
	case "lang":
		return r.Lang.Set(v)
	case "email":
		return r.Email.Set(v)
	case "auth_via":
		return r.AuthVia.Set(v)
	case "auth_user_id":
		return r.AuthUserID.Set(v)
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "tshirt_size":
		return r.TshirtSize.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupUserRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupUserByAuthUserIDRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["auth_via"] = r.AuthVia
	m["auth_user_id"] = r.AuthUserID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupUserByAuthUserIDRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupUserByAuthUserIDRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupUserByAuthUserIDRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupUserByAuthUserIDRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["auth_via"]; ok {
		switch jv.(type) {
		case string:
			r.AuthVia = jv.(string)
			delete(m, "auth_via")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "auth_via"}, "failed to populate fields for LookupUserByAuthUserIDRequest")
		}
	}
	if jv, ok := m["auth_user_id"]; ok {
		switch jv.(type) {
		case string:
			r.AuthUserID = jv.(string)
			delete(m, "auth_user_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "auth_user_id"}, "failed to populate fields for LookupUserByAuthUserIDRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r DeleteUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteUserRequest")
		}
	}
	return nil
}

func (r ListUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Pattern.Valid() {
		m["pattern"] = r.Pattern.Value()
	}
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["pattern"]; ok {
		if err := r.Pattern.Set(jv); err != nil {
			return errors.New("set field Pattern failed: " + err.Error())
		}
		delete(m, "pattern")
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Address.Valid() {
		m["address"] = r.Address.Value()
	}
	if r.Longitude.Valid() {
		m["longitude"] = r.Longitude.Value()
	}
	if r.Latitude.Valid() {
		m["latitude"] = r.Latitude.Value()
	}
	return m
}

func (r CreateVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r CreateVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *CreateVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["address"]; ok {
		if err := r.Address.Set(jv); err != nil {
			return errors.New("set field Address failed: " + err.Error())
		}
		delete(m, "address")
	}
	if jv, ok := m["longitude"]; ok {
		if err := r.Longitude.Set(jv); err != nil {
			return errors.New("set field Longitude failed: " + err.Error())
		}
		delete(m, "longitude")
	}
	if jv, ok := m["latitude"]; ok {
		if err := r.Latitude.Set(jv); err != nil {
			return errors.New("set field Latitude failed: " + err.Error())
		}
		delete(m, "latitude")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name", "address"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateVenueRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "name", "address", "longitude", "latitude"), nil
}

func (r *CreateVenueRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "name":
		return r.Name.Set(v)
	case "address":
		return r.Address.Set(v)
	case "longitude":
		return r.Longitude.Set(v)
	case "latitude":
		return r.Latitude.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Address.Valid() {
		m["address"] = r.Address.Value()
	}
	if r.Longitude.Valid() {
		m["longitude"] = r.Longitude.Value()
	}
	if r.Latitude.Valid() {
		m["latitude"] = r.Latitude.Value()
	}
	return m
}

func (r UpdateVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateVenueRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["address"]; ok {
		if err := r.Address.Set(jv); err != nil {
			return errors.New("set field Address failed: " + err.Error())
		}
		delete(m, "address")
	}
	if jv, ok := m["longitude"]; ok {
		if err := r.Longitude.Set(jv); err != nil {
			return errors.New("set field Longitude failed: " + err.Error())
		}
		delete(m, "longitude")
	}
	if jv, ok := m["latitude"]; ok {
		if err := r.Latitude.Set(jv); err != nil {
			return errors.New("set field Latitude failed: " + err.Error())
		}
		delete(m, "latitude")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name", "address"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateVenueRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "name", "address", "longitude", "latitude"), nil
}

func (r *UpdateVenueRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "name":
		return r.Name.Set(v)
	case "address":
		return r.Address.Set(v)
	case "longitude":
		return r.Longitude.Set(v)
	case "latitude":
		return r.Latitude.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteVenueRequest")
		}
	}
	return nil
}

func (r ListVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r LookupVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupVenueRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r ListSessionsRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.ConferenceID.Valid() {
		m["conference_id"] = r.ConferenceID.Value()
	}
	m["confirmed"] = r.Confirmed
	if r.RangeStart.Valid() {
		m["range_start"] = r.RangeStart.Value()
	}
	if r.RangeEnd.Valid() {
		m["range_end"] = r.RangeEnd.Value()
	}
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	m["status"] = r.Status
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListSessionsRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListSessionsRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListSessionsRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListSessionsRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		if err := r.ConferenceID.Set(jv); err != nil {
			return errors.New("set field ConferenceID failed: " + err.Error())
		}
		delete(m, "conference_id")
	}
	if jv, ok := m["confirmed"]; ok {
		switch jv.(type) {
		case []interface{}:
			jvl := jv.([]interface{})
			list := make([]bool, len(jvl))
			for i, el := range jvl {
				switch el.(type) {
				case bool:
					list[i] = el.(bool)
				default:
					return errors.Wrap(ErrInvalidJSONFieldType{Field: "confirmed"}, "failed to populate fields for ListSessionsRequest")
				}
			}
			r.Confirmed = list
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "confirmed"}, "failed to populate fields for ListSessionsRequest")
		}
	}
	if jv, ok := m["range_start"]; ok {
		if err := r.RangeStart.Set(jv); err != nil {
			return errors.New("set field RangeStart failed: " + err.Error())
		}
		delete(m, "range_start")
	}
	if jv, ok := m["range_end"]; ok {
		if err := r.RangeEnd.Set(jv); err != nil {
			return errors.New("set field RangeEnd failed: " + err.Error())
		}
		delete(m, "range_end")
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["status"]; ok {
		switch jv.(type) {
		case []interface{}:
			jvl := jv.([]interface{})
			list := make([]string, len(jvl))
			for i, el := range jvl {
				switch el.(type) {
				case string:
					list[i] = el.(string)
				default:
					return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListSessionsRequest")
				}
			}
			r.Status = list
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListSessionsRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r LookupQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupQuestionRequest")
		}
	}
	return nil
}

func (r CreateQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["session_id"] = r.SessionID
	m["body"] = r.Body
	return m
}

func (r CreateQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["session_id"]; ok {
		switch jv.(type) {
		case string:
			r.SessionID = jv.(string)
			delete(m, "session_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "session_id"}, "failed to populate fields for CreateQuestionRequest")
		}
	}
	if jv, ok := m["body"]; ok {
		switch jv.(type) {
		case string:
			r.Body = jv.(string)
			delete(m, "body")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "body"}, "failed to populate fields for CreateQuestionRequest")
		}
	}
	return nil
}

func (r UpdateQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.SessionID.Valid() {
		m["session_id"] = r.SessionID.Value()
	}
	if r.Body.Valid() {
		m["body"] = r.Body.Value()
	}
	return m
}

func (r UpdateQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateQuestionRequest")
		}
	}
	if jv, ok := m["session_id"]; ok {
		if err := r.SessionID.Set(jv); err != nil {
			return errors.New("set field SessionID failed: " + err.Error())
		}
		delete(m, "session_id")
	}
	if jv, ok := m["body"]; ok {
		if err := r.Body.Set(jv); err != nil {
			return errors.New("set field Body failed: " + err.Error())
		}
		delete(m, "body")
	}
	return nil
}

func (r DeleteQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteQuestionRequest")
		}
	}
	return nil
}

func (r ListQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateSessionSurveyResponseRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.SessionID.Valid() {
		m["session_id"] = r.SessionID.Value()
	}
	m["user_prior_knowledge"] = r.UserPriorKnowledge
	m["speaker_knowledge"] = r.SpeakerKnowledge
	m["material_quality"] = r.MaterialQuality
	m["overall_rating"] = r.OverallRating
	if r.CommentGood.Valid() {
		m["comment_good"] = r.CommentGood.Value()
	}
	if r.CommentImprovement.Valid() {
		m["comment_improvement"] = r.CommentImprovement.Value()
	}
	return m
}

func (r CreateSessionSurveyResponseRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateSessionSurveyResponseRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateSessionSurveyResponseRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateSessionSurveyResponseRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["session_id"]; ok {
		if err := r.SessionID.Set(jv); err != nil {
			return errors.New("set field SessionID failed: " + err.Error())
		}
		delete(m, "session_id")
	}
	if jv, ok := m["user_prior_knowledge"]; ok {
		switch jv.(type) {
		case float64:
			r.UserPriorKnowledge = int(jv.(float64))
			delete(m, "user_prior_knowledge")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "user_prior_knowledge"}, "failed to populate fields for CreateSessionSurveyResponseRequest")
		}
	}
	if jv, ok := m["speaker_knowledge"]; ok {
		switch jv.(type) {
		case float64:
			r.SpeakerKnowledge = int(jv.(float64))
			delete(m, "speaker_knowledge")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "speaker_knowledge"}, "failed to populate fields for CreateSessionSurveyResponseRequest")
		}
	}
	if jv, ok := m["material_quality"]; ok {
		switch jv.(type) {
		case float64:
			r.MaterialQuality = int(jv.(float64))
			delete(m, "material_quality")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "material_quality"}, "failed to populate fields for CreateSessionSurveyResponseRequest")
		}
	}
	if jv, ok := m["overall_rating"]; ok {
		switch jv.(type) {
		case float64:
			r.OverallRating = int(jv.(float64))
			delete(m, "overall_rating")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "overall_rating"}, "failed to populate fields for CreateSessionSurveyResponseRequest")
		}
	}
	if jv, ok := m["comment_good"]; ok {
		if err := r.CommentGood.Set(jv); err != nil {
			return errors.New("set field CommentGood failed: " + err.Error())
		}
		delete(m, "comment_good")
	}
	if jv, ok := m["comment_improvement"]; ok {
		if err := r.CommentImprovement.Set(jv); err != nil {
			return errors.New("set field CommentImprovement failed: " + err.Error())
		}
		delete(m, "comment_improvement")
	}
	return nil
}

func (r CreateClientRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["name"] = r.Name
	return m
}

func (r CreateClientRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateClientRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateClientRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateClientRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for CreateClientRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			r.Name = jv.(string)
			delete(m, "name")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "name"}, "failed to populate fields for CreateClientRequest")
		}
	}
	return nil
}

func (r LookupClientRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r LookupClientRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupClientRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupClientRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupClientRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupClientRequest")
		}
	}
	return nil
}

func (r UpdateClientRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["secret"] = r.Secret
	m["name"] = r.Name
	return m
}

func (r UpdateClientRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateClientRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateClientRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateClientRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateClientRequest")
		}
	}
	if jv, ok := m["secret"]; ok {
		switch jv.(type) {
		case string:
			r.Secret = jv.(string)
			delete(m, "secret")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "secret"}, "failed to populate fields for UpdateClientRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			r.Name = jv.(string)
			delete(m, "name")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "name"}, "failed to populate fields for UpdateClientRequest")
		}
	}
	return nil
}

func (r LookupFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupFeaturedSpeakerRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r ListFeaturedSpeakersRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListFeaturedSpeakersRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListFeaturedSpeakersRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListFeaturedSpeakersRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListFeaturedSpeakersRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListFeaturedSpeakersRequest")
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r AddFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	m["display_name"] = r.DisplayName
	m["description"] = r.Description
	return m
}

func (r AddFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r AddFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *AddFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for AddFeaturedSpeakerRequest")
		}
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["display_name"]; ok {
		switch jv.(type) {
		case string:
			r.DisplayName = jv.(string)
			delete(m, "display_name")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "display_name"}, "failed to populate fields for AddFeaturedSpeakerRequest")
		}
	}
	if jv, ok := m["description"]; ok {
		switch jv.(type) {
		case string:
			r.Description = jv.(string)
			delete(m, "description")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "description"}, "failed to populate fields for AddFeaturedSpeakerRequest")
		}
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"display_name", "description"}); err != nil {
		return err
	}
	return nil
}

func (r *AddFeaturedSpeakerRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "conference_id", "speaker_id", "avatar_url", "display_name", "description"), nil
}

func (r *AddFeaturedSpeakerRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		if jv, ok := v.(string); ok {
			r.ConferenceID = jv
			return nil
		}
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "display_name":
		if jv, ok := v.(string); ok {
			r.DisplayName = jv
			return nil
		}
	case "description":
		if jv, ok := v.(string); ok {
			r.Description = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	if r.DisplayName.Valid() {
		m["display_name"] = r.DisplayName.Value()
	}
	if r.Description.Valid() {
		m["description"] = r.Description.Value()
	}
	return m
}

func (r UpdateFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateFeaturedSpeakerRequest")
		}
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["display_name"]; ok {
		if err := r.DisplayName.Set(jv); err != nil {
			return errors.New("set field DisplayName failed: " + err.Error())
		}
		delete(m, "display_name")
	}
	if jv, ok := m["description"]; ok {
		if err := r.Description.Set(jv); err != nil {
			return errors.New("set field Description failed: " + err.Error())
		}
		delete(m, "description")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"display_name", "description"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateFeaturedSpeakerRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "speaker_id", "avatar_url", "display_name", "description"), nil
}

func (r *UpdateFeaturedSpeakerRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "display_name":
		return r.DisplayName.Set(v)
	case "description":
		return r.Description.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteFeaturedSpeakerRequest")
		}
	}
	return nil
}

func (r LookupSponsorRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupSponsorRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupSponsorRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupSponsorRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupSponsorRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupSponsorRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r ListSponsorsRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.GroupName.Valid() {
		m["group_name"] = r.GroupName.Value()
	}
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListSponsorsRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListSponsorsRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListSponsorsRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListSponsorsRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListSponsorsRequest")
		}
	}
	if jv, ok := m["group_name"]; ok {
		if err := r.GroupName.Set(jv); err != nil {
			return errors.New("set field GroupName failed: " + err.Error())
		}
		delete(m, "group_name")
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r AddSponsorRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["name"] = r.Name
	m["url"] = r.URL
	if r.LogoURL.Valid() {
		m["logo_url"] = r.LogoURL.Value()
	}
	m["group_name"] = r.GroupName
	m["sort_order"] = r.SortOrder
	return m
}

func (r AddSponsorRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r AddSponsorRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *AddSponsorRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddSponsorRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for AddSponsorRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			r.Name = jv.(string)
			delete(m, "name")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "name"}, "failed to populate fields for AddSponsorRequest")
		}
	}
	if jv, ok := m["url"]; ok {
		switch jv.(type) {
		case string:
			r.URL = jv.(string)
			delete(m, "url")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "url"}, "failed to populate fields for AddSponsorRequest")
		}
	}
	if jv, ok := m["logo_url"]; ok {
		if err := r.LogoURL.Set(jv); err != nil {
			return errors.New("set field LogoURL failed: " + err.Error())
		}
		delete(m, "logo_url")
	}
	if jv, ok := m["group_name"]; ok {
		switch jv.(type) {
		case string:
			r.GroupName = jv.(string)
			delete(m, "group_name")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "group_name"}, "failed to populate fields for AddSponsorRequest")
		}
	}
	if jv, ok := m["sort_order"]; ok {
		switch jv.(type) {
		case float64:
			r.SortOrder = int(jv.(float64))
			delete(m, "sort_order")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "sort_order"}, "failed to populate fields for AddSponsorRequest")
		}
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *AddSponsorRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "conference_id", "name", "url", "logo_url", "group_name", "sort_order"), nil
}

func (r *AddSponsorRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		if jv, ok := v.(string); ok {
			r.ConferenceID = jv
			return nil
		}
	case "name":
		if jv, ok := v.(string); ok {
			r.Name = jv
			return nil
		}
	case "url":
		if jv, ok := v.(string); ok {
			r.URL = jv
			return nil
		}
	case "logo_url":
		return r.LogoURL.Set(v)
	case "group_name":
		if jv, ok := v.(string); ok {
			r.GroupName = jv
			return nil
		}
	case "sort_order":
		if jv, ok := v.(int); ok {
			r.SortOrder = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateSponsorRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.URL.Valid() {
		m["url"] = r.URL.Value()
	}
	if r.GroupName.Valid() {
		m["group_name"] = r.GroupName.Value()
	}
	if r.SortOrder.Valid() {
		m["sort_order"] = r.SortOrder.Value()
	}
	return m
}

func (r UpdateSponsorRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateSponsorRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateSponsorRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateSponsorRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateSponsorRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["url"]; ok {
		if err := r.URL.Set(jv); err != nil {
			return errors.New("set field URL failed: " + err.Error())
		}
		delete(m, "url")
	}
	if jv, ok := m["group_name"]; ok {
		if err := r.GroupName.Set(jv); err != nil {
			return errors.New("set field GroupName failed: " + err.Error())
		}
		delete(m, "group_name")
	}
	if jv, ok := m["sort_order"]; ok {
		if err := r.SortOrder.Set(jv); err != nil {
			return errors.New("set field SortOrder failed: " + err.Error())
		}
		delete(m, "sort_order")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateSponsorRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "name", "url", "group_name", "sort_order"), nil
}

func (r *UpdateSponsorRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "name":
		return r.Name.Set(v)
	case "url":
		return r.URL.Set(v)
	case "group_name":
		return r.GroupName.Set(v)
	case "sort_order":
		return r.SortOrder.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteSponsorRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteSponsorRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteSponsorRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteSponsorRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteSponsorRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteSponsorRequest")
		}
	}
	return nil
}

func (r ListConferencesByOrganizerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["organizer_id"] = r.OrganizerID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	m["status"] = r.Status
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListConferencesByOrganizerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferencesByOrganizerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferencesByOrganizerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferencesByOrganizerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["organizer_id"]; ok {
		switch jv.(type) {
		case []interface{}:
			jvl := jv.([]interface{})
			list := make([]string, len(jvl))
			for i, el := range jvl {
				switch el.(type) {
				case string:
					list[i] = el.(string)
				default:
					return errors.Wrap(ErrInvalidJSONFieldType{Field: "organizer_id"}, "failed to populate fields for ListConferencesByOrganizerRequest")
				}
			}
			r.OrganizerID = list
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "organizer_id"}, "failed to populate fields for ListConferencesByOrganizerRequest")
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["status"]; ok {
		switch jv.(type) {
		case []interface{}:
			jvl := jv.([]interface{})
			list := make([]string, len(jvl))
			for i, el := range jvl {
				switch el.(type) {
				case string:
					list[i] = el.(string)
				default:
					return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListConferencesByOrganizerRequest")
				}
			}
			r.Status = list
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListConferencesByOrganizerRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateTemporaryEmailRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["target_id"] = r.TargetID
	m["email"] = r.Email
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r CreateTemporaryEmailRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateTemporaryEmailRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateTemporaryEmailRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateTemporaryEmailRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["target_id"]; ok {
		switch jv.(type) {
		case string:
			r.TargetID = jv.(string)
			delete(m, "target_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "target_id"}, "failed to populate fields for CreateTemporaryEmailRequest")
		}
	}
	if jv, ok := m["email"]; ok {
		switch jv.(type) {
		case string:
			r.Email = jv.(string)
			delete(m, "email")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "email"}, "failed to populate fields for CreateTemporaryEmailRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r CreateTemporaryEmailResponse) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["confirmation_key"] = r.ConfirmationKey
	return m
}

func (r CreateTemporaryEmailResponse) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateTemporaryEmailResponse) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateTemporaryEmailResponse) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateTemporaryEmailResponse) Populate(m map[string]interface{}) error {
	if jv, ok := m["confirmation_key"]; ok {
		switch jv.(type) {
		case string:
			r.ConfirmationKey = jv.(string)
			delete(m, "confirmation_key")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "confirmation_key"}, "failed to populate fields for CreateTemporaryEmailResponse")
		}
	}
	return nil
}

func (r ConfirmTemporaryEmailRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["target_id"] = r.TargetID
	m["confirmation_key"] = r.ConfirmationKey
	return m
}

func (r ConfirmTemporaryEmailRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ConfirmTemporaryEmailRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ConfirmTemporaryEmailRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ConfirmTemporaryEmailRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["target_id"]; ok {
		switch jv.(type) {
		case string:
			r.TargetID = jv.(string)
			delete(m, "target_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "target_id"}, "failed to populate fields for ConfirmTemporaryEmailRequest")
		}
	}
	if jv, ok := m["confirmation_key"]; ok {
		switch jv.(type) {
		case string:
			r.ConfirmationKey = jv.(string)
			delete(m, "confirmation_key")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "confirmation_key"}, "failed to populate fields for ConfirmTemporaryEmailRequest")
		}
	}
	return nil
}

func (r ListConferenceCredentialRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	return m
}

func (r ListConferenceCredentialRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceCredentialRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceCredentialRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceCredentialRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListConferenceCredentialRequest")
		}
	}
	return nil
}

func (r AddConferenceCredentialRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["type"] = r.Type
	m["data"] = r.Data
	return m
}

func (r AddConferenceCredentialRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceCredentialRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceCredentialRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceCredentialRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for AddConferenceCredentialRequest")
		}
	}
	if jv, ok := m["type"]; ok {
		switch jv.(type) {
		case string:
			r.Type = jv.(string)
			delete(m, "type")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "type"}, "failed to populate fields for AddConferenceCredentialRequest")
		}
	}
	if jv, ok := m["data"]; ok {
		switch jv.(type) {
		case string:
			r.Data = jv.(string)
			delete(m, "data")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "data"}, "failed to populate fields for AddConferenceCredentialRequest")
		}
	}
	return nil
}

func (r TweetAsConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["tweet"] = r.Tweet
	return m
}

func (r TweetAsConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r TweetAsConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *TweetAsConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *TweetAsConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for TweetAsConferenceRequest")
		}
	}
	if jv, ok := m["tweet"]; ok {
		switch jv.(type) {
		case string:
			r.Tweet = jv.(string)
			delete(m, "tweet")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "tweet"}, "failed to populate fields for TweetAsConferenceRequest")
		}
	}
	return nil
}

func (r GetConferenceScheduleRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r GetConferenceScheduleRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r GetConferenceScheduleRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *GetConferenceScheduleRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *GetConferenceScheduleRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for GetConferenceScheduleRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r VerifyUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r VerifyUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r VerifyUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *VerifyUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *VerifyUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for VerifyUserRequest")
		}
	}
	return nil
}

func (r SendSelectionResultNotificationRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["force"] = r.Force
	m["session_id"] = r.SessionID
	return m
}

func (r SendSelectionResultNotificationRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r SendSelectionResultNotificationRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *SendSelectionResultNotificationRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *SendSelectionResultNotificationRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["force"]; ok {
		switch jv.(type) {
		case bool:
			r.Force = jv.(bool)
			delete(m, "force")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "force"}, "failed to populate fields for SendSelectionResultNotificationRequest")
		}
	}
	if jv, ok := m["session_id"]; ok {
		switch jv.(type) {
		case string:
			r.SessionID = jv.(string)
			delete(m, "session_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "session_id"}, "failed to populate fields for SendSelectionResultNotificationRequest")
		}
	}
	return nil
}

func (r SendAllSelectionResultNotificationRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["force"] = r.Force
	m["conference_id"] = r.ConferenceID
	return m
}

func (r SendAllSelectionResultNotificationRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r SendAllSelectionResultNotificationRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *SendAllSelectionResultNotificationRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *SendAllSelectionResultNotificationRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["force"]; ok {
		switch jv.(type) {
		case bool:
			r.Force = jv.(bool)
			delete(m, "force")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "force"}, "failed to populate fields for SendAllSelectionResultNotificationRequest")
		}
	}
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for SendAllSelectionResultNotificationRequest")
		}
	}
	return nil
}

func (r SendSelectionResultNotificationResponse) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["message"] = r.Message
	return m
}

func (r SendSelectionResultNotificationResponse) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r SendSelectionResultNotificationResponse) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *SendSelectionResultNotificationResponse) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *SendSelectionResultNotificationResponse) Populate(m map[string]interface{}) error {
	if jv, ok := m["message"]; ok {
		switch jv.(type) {
		case string:
			r.Message = jv.(string)
			delete(m, "message")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "message"}, "failed to populate fields for SendSelectionResultNotificationResponse")
		}
	}
	return nil
}

func (r SendAllSelectionResultNotificationResponse) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["message"] = r.Message
	return m
}

func (r SendAllSelectionResultNotificationResponse) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r SendAllSelectionResultNotificationResponse) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *SendAllSelectionResultNotificationResponse) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *SendAllSelectionResultNotificationResponse) Populate(m map[string]interface{}) error {
	if jv, ok := m["message"]; ok {
		switch jv.(type) {
		case string:
			r.Message = jv.(string)
			delete(m, "message")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "message"}, "failed to populate fields for SendAllSelectionResultNotificationResponse")
		}
	}
	return nil
}

func (r LookupTrackRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupTrackRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupTrackRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupTrackRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupTrackRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupTrackRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r CreateTrackRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["room_id"] = r.RoomID
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.SortOrder.Valid() {
		m["sort_order"] = r.SortOrder.Value()
	}
	return m
}

func (r CreateTrackRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r CreateTrackRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *CreateTrackRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateTrackRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for CreateTrackRequest")
		}
	}
	if jv, ok := m["room_id"]; ok {
		switch jv.(type) {
		case string:
			r.RoomID = jv.(string)
			delete(m, "room_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "room_id"}, "failed to populate fields for CreateTrackRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["sort_order"]; ok {
		if err := r.SortOrder.Set(jv); err != nil {
			return errors.New("set field SortOrder failed: " + err.Error())
		}
		delete(m, "sort_order")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateTrackRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "conference_id", "room_id", "name", "sort_order"), nil
}

func (r *CreateTrackRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		if jv, ok := v.(string); ok {
			r.ConferenceID = jv
			return nil
		}
	case "room_id":
		if jv, ok := v.(string); ok {
			r.RoomID = jv
			return nil
		}
	case "name":
		return r.Name.Set(v)
	case "sort_order":
		return r.SortOrder.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateTrackRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.RoomID.Valid() {
		m["room_id"] = r.RoomID.Value()
	}
	if r.SortOrder.Valid() {
		m["sort_order"] = r.SortOrder.Value()
	}
	return m
}

func (r UpdateTrackRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateTrackRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateTrackRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateTrackRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateTrackRequest")
		}
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["room_id"]; ok {
		if err := r.RoomID.Set(jv); err != nil {
			return errors.New("set field RoomID failed: " + err.Error())
		}
		delete(m, "room_id")
	}
	if jv, ok := m["sort_order"]; ok {
		if err := r.SortOrder.Set(jv); err != nil {
			return errors.New("set field SortOrder failed: " + err.Error())
		}
		delete(m, "sort_order")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateTrackRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "name", "room_id", "sort_order"), nil
}

func (r *UpdateTrackRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "name":
		return r.Name.Set(v)
	case "room_id":
		return r.RoomID.Set(v)
	case "sort_order":
		return r.SortOrder.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteTrackRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteTrackRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteTrackRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteTrackRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteTrackRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteTrackRequest")
		}
	}
	return nil
}

func (r CreateConferenceVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	return m
}

func (r CreateConferenceVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateConferenceVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateConferenceVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateConferenceVenueRequest) Populate(m map[string]interface{}) error {
	return nil
}

func (r UpdateConferenceVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	return m
}

func (r UpdateConferenceVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateConferenceVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateConferenceVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateConferenceVenueRequest) Populate(m map[string]interface{}) error {
	return nil
}

func (r CreateBlogEntryRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["status"] = r.Status
	m["title"] = r.Title
	m["url"] = r.URL
	return m
}

func (r CreateBlogEntryRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateBlogEntryRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateBlogEntryRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateBlogEntryRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for CreateBlogEntryRequest")
		}
	}
	if jv, ok := m["status"]; ok {
		switch jv.(type) {
		case string:
			r.Status = jv.(string)
			delete(m, "status")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for CreateBlogEntryRequest")
		}
	}
	if jv, ok := m["title"]; ok {
		switch jv.(type) {
		case string:
			r.Title = jv.(string)
			delete(m, "title")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "title"}, "failed to populate fields for CreateBlogEntryRequest")
		}
	}
	if jv, ok := m["url"]; ok {
		switch jv.(type) {
		case string:
			r.URL = jv.(string)
			delete(m, "url")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "url"}, "failed to populate fields for CreateBlogEntryRequest")
		}
	}
	return nil
}

func (r UpdateBlogEntryRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Status.Valid() {
		m["status"] = r.Status.Value()
	}
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.URL.Valid() {
		m["url"] = r.URL.Value()
	}
	return m
}

func (r UpdateBlogEntryRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateBlogEntryRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateBlogEntryRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateBlogEntryRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateBlogEntryRequest")
		}
	}
	if jv, ok := m["status"]; ok {
		if err := r.Status.Set(jv); err != nil {
			return errors.New("set field Status failed: " + err.Error())
		}
		delete(m, "status")
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["url"]; ok {
		if err := r.URL.Set(jv); err != nil {
			return errors.New("set field URL failed: " + err.Error())
		}
		delete(m, "url")
	}
	return nil
}

func (r LookupBlogEntryRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r LookupBlogEntryRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupBlogEntryRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupBlogEntryRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupBlogEntryRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupBlogEntryRequest")
		}
	}
	return nil
}

func (r DeleteBlogEntryRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteBlogEntryRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteBlogEntryRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteBlogEntryRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteBlogEntryRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteBlogEntryRequest")
		}
	}
	return nil
}

func (r ListBlogEntriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["status"] = r.Status
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListBlogEntriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListBlogEntriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListBlogEntriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListBlogEntriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListBlogEntriesRequest")
		}
	}
	if jv, ok := m["status"]; ok {
		switch jv.(type) {
		case []interface{}:
			jvl := jv.([]interface{})
			list := make([]string, len(jvl))
			for i, el := range jvl {
				switch el.(type) {
				case string:
					list[i] = el.(string)
				default:
					return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListBlogEntriesRequest")
				}
			}
			r.Status = list
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "status"}, "failed to populate fields for ListBlogEntriesRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r AddConferenceStaffRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["staff_id"] = r.StaffID
	return m
}

func (r AddConferenceStaffRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceStaffRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceStaffRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceStaffRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for AddConferenceStaffRequest")
		}
	}
	if jv, ok := m["staff_id"]; ok {
		switch jv.(type) {
		case string:
			r.StaffID = jv.(string)
			delete(m, "staff_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "staff_id"}, "failed to populate fields for AddConferenceStaffRequest")
		}
	}
	return nil
}

func (r DeleteConferenceStaffRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["staff_id"] = r.StaffID
	return m
}

func (r DeleteConferenceStaffRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceStaffRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceStaffRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceStaffRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for DeleteConferenceStaffRequest")
		}
	}
	if jv, ok := m["staff_id"]; ok {
		switch jv.(type) {
		case string:
			r.StaffID = jv.(string)
			delete(m, "staff_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "staff_id"}, "failed to populate fields for DeleteConferenceStaffRequest")
		}
	}
	return nil
}

func (r ListConferenceStaffRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListConferenceStaffRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceStaffRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceStaffRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceStaffRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListConferenceStaffRequest")
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupExternalResourceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupExternalResourceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupExternalResourceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupExternalResourceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupExternalResourceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for LookupExternalResourceRequest")
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r ListExternalResourceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListExternalResourceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListExternalResourceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListExternalResourceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListExternalResourceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for ListExternalResourceRequest")
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r CreateExternalResourceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Description.Valid() {
		m["description"] = r.Description.Value()
	}
	m["title"] = r.Title
	m["url"] = r.URL
	if r.SortOrder.Valid() {
		m["sort_order"] = r.SortOrder.Value()
	}
	return m
}

func (r CreateExternalResourceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r CreateExternalResourceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *CreateExternalResourceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateExternalResourceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "conference_id"}, "failed to populate fields for CreateExternalResourceRequest")
		}
	}
	if jv, ok := m["description"]; ok {
		if err := r.Description.Set(jv); err != nil {
			return errors.New("set field Description failed: " + err.Error())
		}
		delete(m, "description")
	}
	if jv, ok := m["title"]; ok {
		switch jv.(type) {
		case string:
			r.Title = jv.(string)
			delete(m, "title")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "title"}, "failed to populate fields for CreateExternalResourceRequest")
		}
	}
	if jv, ok := m["url"]; ok {
		switch jv.(type) {
		case string:
			r.URL = jv.(string)
			delete(m, "url")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "url"}, "failed to populate fields for CreateExternalResourceRequest")
		}
	}
	if jv, ok := m["sort_order"]; ok {
		if err := r.SortOrder.Set(jv); err != nil {
			return errors.New("set field SortOrder failed: " + err.Error())
		}
		delete(m, "sort_order")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"description", "title"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateExternalResourceRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "conference_id", "description", "title", "url", "sort_order"), nil
}

func (r *CreateExternalResourceRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		if jv, ok := v.(string); ok {
			r.ConferenceID = jv
			return nil
		}
	case "description":
		return r.Description.Set(v)
	case "title":
		if jv, ok := v.(string); ok {
			r.Title = jv
			return nil
		}
	case "url":
		if jv, ok := v.(string); ok {
			r.URL = jv
			return nil
		}
	case "sort_order":
		return r.SortOrder.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateExternalResourceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Description.Valid() {
		m["description"] = r.Description.Value()
	}
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.URL.Valid() {
		m["url"] = r.URL.Value()
	}
	if r.SortOrder.Valid() {
		m["sort_order"] = r.SortOrder.Value()
	}
	return m
}

func (r UpdateExternalResourceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalJSONWithL10N(buf, r.LocalizedFields)
}

func (r UpdateExternalResourceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return MarshalURLWithL10N(buf, r.LocalizedFields)
}

func (r *UpdateExternalResourceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateExternalResourceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for UpdateExternalResourceRequest")
		}
	}
	if jv, ok := m["description"]; ok {
		if err := r.Description.Set(jv); err != nil {
			return errors.New("set field Description failed: " + err.Error())
		}
		delete(m, "description")
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["url"]; ok {
		if err := r.URL.Set(jv); err != nil {
			return errors.New("set field URL failed: " + err.Error())
		}
		delete(m, "url")
	}
	if jv, ok := m["sort_order"]; ok {
		if err := r.SortOrder.Set(jv); err != nil {
			return errors.New("set field SortOrder failed: " + err.Error())
		}
		delete(m, "sort_order")
	}
	if err := ExtractL10NFields(m, &r.LocalizedFields, []string{"description", "title"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateExternalResourceRequest) GetPropNames() ([]string, error) {
	l, _ := r.LocalizedFields.GetPropNames()
	return append(l, "id", "description", "title", "url", "sort_order"), nil
}

func (r *UpdateExternalResourceRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "description":
		return r.Description.Set(v)
	case "title":
		return r.Title.Set(v)
	case "url":
		return r.URL.Set(v)
	case "sort_order":
		return r.SortOrder.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteExternalResourceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteExternalResourceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteExternalResourceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteExternalResourceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteExternalResourceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for DeleteExternalResourceRequest")
		}
	}
	return nil
}

func (r SetSessionVideoCoverRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r SetSessionVideoCoverRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r SetSessionVideoCoverRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *SetSessionVideoCoverRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *SetSessionVideoCoverRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "id"}, "failed to populate fields for SetSessionVideoCoverRequest")
		}
	}
	return nil
}

func (r CreateClientSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["access_token"] = r.AccessToken
	m["auth_via"] = r.AuthVia
	return m
}

func (r CreateClientSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateClientSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateClientSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateClientSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["access_token"]; ok {
		switch jv.(type) {
		case string:
			r.AccessToken = jv.(string)
			delete(m, "access_token")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "access_token"}, "failed to populate fields for CreateClientSessionRequest")
		}
	}
	if jv, ok := m["auth_via"]; ok {
		switch jv.(type) {
		case string:
			r.AuthVia = jv.(string)
			delete(m, "auth_via")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "auth_via"}, "failed to populate fields for CreateClientSessionRequest")
		}
	}
	return nil
}

func (r CreateClientSessionResponse) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["sid"] = r.SessionID
	m["expires"] = r.Expires
	return m
}

func (r CreateClientSessionResponse) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateClientSessionResponse) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateClientSessionResponse) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateClientSessionResponse) Populate(m map[string]interface{}) error {
	if jv, ok := m["sid"]; ok {
		switch jv.(type) {
		case string:
			r.SessionID = jv.(string)
			delete(m, "sid")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "sid"}, "failed to populate fields for CreateClientSessionResponse")
		}
	}
	if jv, ok := m["expires"]; ok {
		switch jv.(type) {
		case string:
			r.Expires = jv.(string)
			delete(m, "expires")
		default:
			return errors.Wrap(ErrInvalidJSONFieldType{Field: "expires"}, "failed to populate fields for CreateClientSessionResponse")
		}
	}
	return nil
}
