package model

// Automatically generated by gentransport utility. DO NOT EDIT!

import (
	"encoding/json"
	"errors"

	"github.com/builderscon/octav/octav/tools"

	"github.com/lestrrat/go-urlenc"
)

func (r LookupConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r CreateConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["user_id"] = r.UserID
	m["slug"] = r.Slug
	m["title"] = r.Title
	return m
}

func (r CreateConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r CreateConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *CreateConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if jv, ok := m["slug"]; ok {
		switch jv.(type) {
		case string:
			r.Slug = jv.(string)
			delete(m, "slug")
		default:
			return ErrInvalidJSONFieldType{Field: "slug"}
		}
	}
	if jv, ok := m["title"]; ok {
		switch jv.(type) {
		case string:
			r.Title = jv.(string)
			delete(m, "title")
		default:
			return ErrInvalidJSONFieldType{Field: "title"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"user_id", "slug", "title"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateConferenceSeriesRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "user_id", "slug", "title"), nil
}

func (r *CreateConferenceSeriesRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	case "slug":
		if jv, ok := v.(string); ok {
			r.Slug = jv
			return nil
		}
	case "title":
		if jv, ok := v.(string); ok {
			r.Title = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Slug.Valid() {
		m["slug"] = r.Slug.Value()
	}
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	return m
}

func (r UpdateConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r UpdateConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *UpdateConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["slug"]; ok {
		if err := r.Slug.Set(jv); err != nil {
			return errors.New("set field Slug failed: " + err.Error())
		}
		delete(m, "slug")
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"id", "slug", "title"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateConferenceSeriesRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "id", "slug", "title"), nil
}

func (r *UpdateConferenceSeriesRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "slug":
		return r.Slug.Set(v)
	case "title":
		return r.Title.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r ListConferenceSeriesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListConferenceSeriesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceSeriesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceSeriesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceSeriesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r AddConferenceSeriesAdminRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["series_id"] = r.SeriesID
	m["admin_id"] = r.AdminID
	m["user_id"] = r.UserID
	return m
}

func (r AddConferenceSeriesAdminRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceSeriesAdminRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceSeriesAdminRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceSeriesAdminRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["series_id"]; ok {
		switch jv.(type) {
		case string:
			r.SeriesID = jv.(string)
			delete(m, "series_id")
		default:
			return ErrInvalidJSONFieldType{Field: "series_id"}
		}
	}
	if jv, ok := m["admin_id"]; ok {
		switch jv.(type) {
		case string:
			r.AdminID = jv.(string)
			delete(m, "admin_id")
		default:
			return ErrInvalidJSONFieldType{Field: "admin_id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r CreateConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["title"] = r.Title
	m["series_id"] = r.SeriesID
	if r.SubTitle.Valid() {
		m["sub_title"] = r.SubTitle.Value()
	}
	m["slug"] = r.Slug
	m["user_id"] = r.UserID
	return m
}

func (r CreateConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r CreateConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *CreateConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["title"]; ok {
		switch jv.(type) {
		case string:
			r.Title = jv.(string)
			delete(m, "title")
		default:
			return ErrInvalidJSONFieldType{Field: "title"}
		}
	}
	if jv, ok := m["series_id"]; ok {
		switch jv.(type) {
		case string:
			r.SeriesID = jv.(string)
			delete(m, "series_id")
		default:
			return ErrInvalidJSONFieldType{Field: "series_id"}
		}
	}
	if jv, ok := m["sub_title"]; ok {
		if err := r.SubTitle.Set(jv); err != nil {
			return errors.New("set field SubTitle failed: " + err.Error())
		}
		delete(m, "sub_title")
	}
	if jv, ok := m["slug"]; ok {
		switch jv.(type) {
		case string:
			r.Slug = jv.(string)
			delete(m, "slug")
		default:
			return ErrInvalidJSONFieldType{Field: "slug"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"title", "series_id", "sub_title", "slug", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateConferenceRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "title", "series_id", "sub_title", "slug", "user_id"), nil
}

func (r *CreateConferenceRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "title":
		if jv, ok := v.(string); ok {
			r.Title = jv
			return nil
		}
	case "series_id":
		if jv, ok := v.(string); ok {
			r.SeriesID = jv
			return nil
		}
	case "sub_title":
		return r.SubTitle.Set(v)
	case "slug":
		if jv, ok := v.(string); ok {
			r.Slug = jv
			return nil
		}
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupConferenceBySlugRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["slug"] = r.Slug
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupConferenceBySlugRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupConferenceBySlugRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupConferenceBySlugRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupConferenceBySlugRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["slug"]; ok {
		switch jv.(type) {
		case string:
			r.Slug = jv.(string)
			delete(m, "slug")
		default:
			return ErrInvalidJSONFieldType{Field: "slug"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r UpdateConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.SeriesID.Valid() {
		m["series_id"] = r.SeriesID.Value()
	}
	if r.SubTitle.Valid() {
		m["sub_title"] = r.SubTitle.Value()
	}
	if r.Slug.Valid() {
		m["slug"] = r.Slug.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r UpdateConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r UpdateConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *UpdateConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["series_id"]; ok {
		if err := r.SeriesID.Set(jv); err != nil {
			return errors.New("set field SeriesID failed: " + err.Error())
		}
		delete(m, "series_id")
	}
	if jv, ok := m["sub_title"]; ok {
		if err := r.SubTitle.Set(jv); err != nil {
			return errors.New("set field SubTitle failed: " + err.Error())
		}
		delete(m, "sub_title")
	}
	if jv, ok := m["slug"]; ok {
		if err := r.Slug.Set(jv); err != nil {
			return errors.New("set field Slug failed: " + err.Error())
		}
		delete(m, "slug")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"id", "title", "series_id", "sub_title", "slug", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateConferenceRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "id", "title", "series_id", "sub_title", "slug", "user_id"), nil
}

func (r *UpdateConferenceRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "title":
		return r.Title.Set(v)
	case "series_id":
		return r.SeriesID.Set(v)
	case "sub_title":
		return r.SubTitle.Set(v)
	case "slug":
		return r.Slug.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r AddConferenceDatesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["dates"] = r.Dates
	m["user_id"] = r.UserID
	return m
}

func (r AddConferenceDatesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceDatesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceDatesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceDatesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["dates"]; ok {
		if err := r.Dates.Extract(jv); err != nil {
			return errors.New("extract field Dates failed: " + err.Error())
		}
		delete(m, "dates")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r AddConferenceAdminRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["admin_id"] = r.AdminID
	m["user_id"] = r.UserID
	return m
}

func (r AddConferenceAdminRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceAdminRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceAdminRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceAdminRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["admin_id"]; ok {
		switch jv.(type) {
		case string:
			r.AdminID = jv.(string)
			delete(m, "admin_id")
		default:
			return ErrInvalidJSONFieldType{Field: "admin_id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r AddConferenceVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["venue_id"] = r.VenueID
	m["user_id"] = r.UserID
	return m
}

func (r AddConferenceVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddConferenceVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddConferenceVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddConferenceVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return ErrInvalidJSONFieldType{Field: "venue_id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r DeleteConferenceDatesRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["dates"] = r.Dates
	m["user_id"] = r.UserID
	return m
}

func (r DeleteConferenceDatesRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceDatesRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceDatesRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceDatesRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["dates"]; ok {
		if err := r.Dates.Extract(jv); err != nil {
			return errors.New("extract field Dates failed: " + err.Error())
		}
		delete(m, "dates")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r DeleteConferenceAdminRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["admin_id"] = r.AdminID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteConferenceAdminRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceAdminRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceAdminRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceAdminRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["admin_id"]; ok {
		switch jv.(type) {
		case string:
			r.AdminID = jv.(string)
			delete(m, "admin_id")
		default:
			return ErrInvalidJSONFieldType{Field: "admin_id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r DeleteConferenceVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	m["venue_id"] = r.VenueID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteConferenceVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return ErrInvalidJSONFieldType{Field: "venue_id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r DeleteConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r AddVenueRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["venue_id"] = r.VenueID
	m["room_id"] = r.RoomID
	return m
}

func (r AddVenueRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r AddVenueRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *AddVenueRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *AddVenueRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return ErrInvalidJSONFieldType{Field: "venue_id"}
		}
	}
	if jv, ok := m["room_id"]; ok {
		switch jv.(type) {
		case string:
			r.RoomID = jv.(string)
			delete(m, "room_id")
		default:
			return ErrInvalidJSONFieldType{Field: "room_id"}
		}
	}
	return nil
}

func (r DeleteVenueRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["venue_id"] = r.VenueID
	m["room_id"] = r.RoomID
	return m
}

func (r DeleteVenueRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteVenueRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteVenueRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteVenueRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return ErrInvalidJSONFieldType{Field: "venue_id"}
		}
	}
	if jv, ok := m["room_id"]; ok {
		switch jv.(type) {
		case string:
			r.RoomID = jv.(string)
			delete(m, "room_id")
		default:
			return ErrInvalidJSONFieldType{Field: "room_id"}
		}
	}
	return nil
}

func (r ListConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.RangeEnd.Valid() {
		m["range_end"] = r.RangeEnd.Value()
	}
	if r.RangeStart.Valid() {
		m["range_start"] = r.RangeStart.Value()
	}
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["range_end"]; ok {
		if err := r.RangeEnd.Set(jv); err != nil {
			return errors.New("set field RangeEnd failed: " + err.Error())
		}
		delete(m, "range_end")
	}
	if jv, ok := m["range_start"]; ok {
		if err := r.RangeStart.Set(jv); err != nil {
			return errors.New("set field RangeStart failed: " + err.Error())
		}
		delete(m, "range_start")
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.VenueID.Valid() {
		m["venue_id"] = r.VenueID.Value()
	}
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Capacity.Valid() {
		m["capacity"] = r.Capacity.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r CreateRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r CreateRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *CreateRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		if err := r.VenueID.Set(jv); err != nil {
			return errors.New("set field VenueID failed: " + err.Error())
		}
		delete(m, "venue_id")
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["capacity"]; ok {
		if err := r.Capacity.Set(jv); err != nil {
			return errors.New("set field Capacity failed: " + err.Error())
		}
		delete(m, "capacity")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"venue_id", "name", "capacity", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateRoomRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "venue_id", "name", "capacity", "user_id"), nil
}

func (r *CreateRoomRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "venue_id":
		return r.VenueID.Set(v)
	case "name":
		return r.Name.Set(v)
	case "capacity":
		return r.Capacity.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r UpdateRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.VenueID.Valid() {
		m["venue_id"] = r.VenueID.Value()
	}
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Capacity.Valid() {
		m["capacity"] = r.Capacity.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r UpdateRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r UpdateRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *UpdateRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["venue_id"]; ok {
		if err := r.VenueID.Set(jv); err != nil {
			return errors.New("set field VenueID failed: " + err.Error())
		}
		delete(m, "venue_id")
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["capacity"]; ok {
		if err := r.Capacity.Set(jv); err != nil {
			return errors.New("set field Capacity failed: " + err.Error())
		}
		delete(m, "capacity")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"id", "venue_id", "name", "capacity", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateRoomRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "id", "venue_id", "name", "capacity", "user_id"), nil
}

func (r *UpdateRoomRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "venue_id":
		return r.VenueID.Set(v)
	case "name":
		return r.Name.Set(v)
	case "capacity":
		return r.Capacity.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r ListRoomRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["venue_id"] = r.VenueID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListRoomRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListRoomRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListRoomRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListRoomRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			r.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return ErrInvalidJSONFieldType{Field: "venue_id"}
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.ConferenceID.Valid() {
		m["conference_id"] = r.ConferenceID.Value()
	}
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.Abstract.Valid() {
		m["abstract"] = r.Abstract.Value()
	}
	if r.Memo.Valid() {
		m["memo"] = r.Memo.Value()
	}
	if r.Duration.Valid() {
		m["duration"] = r.Duration.Value()
	}
	if r.MaterialLevel.Valid() {
		m["material_level"] = r.MaterialLevel.Value()
	}
	if r.Tags.Valid() {
		m["tags"] = r.Tags.Value()
	}
	if r.Category.Valid() {
		m["category"] = r.Category.Value()
	}
	if r.SpokenLanguage.Valid() {
		m["spoken_language"] = r.SpokenLanguage.Value()
	}
	if r.SlideLanguage.Valid() {
		m["slide_language"] = r.SlideLanguage.Value()
	}
	if r.SlideSubtitles.Valid() {
		m["slide_subtitles"] = r.SlideSubtitles.Value()
	}
	if r.SlideURL.Valid() {
		m["slide_url"] = r.SlideURL.Value()
	}
	if r.VideoURL.Valid() {
		m["video_url"] = r.VideoURL.Value()
	}
	if r.PhotoPermission.Valid() {
		m["photo_permission"] = r.PhotoPermission.Value()
	}
	if r.VideoPermission.Valid() {
		m["video_permission"] = r.VideoPermission.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r CreateSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r CreateSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *CreateSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		if err := r.ConferenceID.Set(jv); err != nil {
			return errors.New("set field ConferenceID failed: " + err.Error())
		}
		delete(m, "conference_id")
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["abstract"]; ok {
		if err := r.Abstract.Set(jv); err != nil {
			return errors.New("set field Abstract failed: " + err.Error())
		}
		delete(m, "abstract")
	}
	if jv, ok := m["memo"]; ok {
		if err := r.Memo.Set(jv); err != nil {
			return errors.New("set field Memo failed: " + err.Error())
		}
		delete(m, "memo")
	}
	if jv, ok := m["duration"]; ok {
		if err := r.Duration.Set(jv); err != nil {
			return errors.New("set field Duration failed: " + err.Error())
		}
		delete(m, "duration")
	}
	if jv, ok := m["material_level"]; ok {
		if err := r.MaterialLevel.Set(jv); err != nil {
			return errors.New("set field MaterialLevel failed: " + err.Error())
		}
		delete(m, "material_level")
	}
	if jv, ok := m["tags"]; ok {
		if err := r.Tags.Set(jv); err != nil {
			return errors.New("set field Tags failed: " + err.Error())
		}
		delete(m, "tags")
	}
	if jv, ok := m["category"]; ok {
		if err := r.Category.Set(jv); err != nil {
			return errors.New("set field Category failed: " + err.Error())
		}
		delete(m, "category")
	}
	if jv, ok := m["spoken_language"]; ok {
		if err := r.SpokenLanguage.Set(jv); err != nil {
			return errors.New("set field SpokenLanguage failed: " + err.Error())
		}
		delete(m, "spoken_language")
	}
	if jv, ok := m["slide_language"]; ok {
		if err := r.SlideLanguage.Set(jv); err != nil {
			return errors.New("set field SlideLanguage failed: " + err.Error())
		}
		delete(m, "slide_language")
	}
	if jv, ok := m["slide_subtitles"]; ok {
		if err := r.SlideSubtitles.Set(jv); err != nil {
			return errors.New("set field SlideSubtitles failed: " + err.Error())
		}
		delete(m, "slide_subtitles")
	}
	if jv, ok := m["slide_url"]; ok {
		if err := r.SlideURL.Set(jv); err != nil {
			return errors.New("set field SlideURL failed: " + err.Error())
		}
		delete(m, "slide_url")
	}
	if jv, ok := m["video_url"]; ok {
		if err := r.VideoURL.Set(jv); err != nil {
			return errors.New("set field VideoURL failed: " + err.Error())
		}
		delete(m, "video_url")
	}
	if jv, ok := m["photo_permission"]; ok {
		if err := r.PhotoPermission.Set(jv); err != nil {
			return errors.New("set field PhotoPermission failed: " + err.Error())
		}
		delete(m, "photo_permission")
	}
	if jv, ok := m["video_permission"]; ok {
		if err := r.VideoPermission.Set(jv); err != nil {
			return errors.New("set field VideoPermission failed: " + err.Error())
		}
		delete(m, "video_permission")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"conference_id", "speaker_id", "title", "abstract", "memo", "duration", "material_level", "tags", "category", "spoken_language", "slide_language", "slide_subtitles", "slide_url", "video_url", "photo_permission", "video_permission", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateSessionRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "conference_id", "speaker_id", "title", "abstract", "memo", "duration", "material_level", "tags", "category", "spoken_language", "slide_language", "slide_subtitles", "slide_url", "video_url", "photo_permission", "video_permission", "user_id"), nil
}

func (r *CreateSessionRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		return r.ConferenceID.Set(v)
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "title":
		return r.Title.Set(v)
	case "abstract":
		return r.Abstract.Set(v)
	case "memo":
		return r.Memo.Set(v)
	case "duration":
		return r.Duration.Set(v)
	case "material_level":
		return r.MaterialLevel.Set(v)
	case "tags":
		return r.Tags.Set(v)
	case "category":
		return r.Category.Set(v)
	case "spoken_language":
		return r.SpokenLanguage.Set(v)
	case "slide_language":
		return r.SlideLanguage.Set(v)
	case "slide_subtitles":
		return r.SlideSubtitles.Set(v)
	case "slide_url":
		return r.SlideURL.Set(v)
	case "video_url":
		return r.VideoURL.Set(v)
	case "photo_permission":
		return r.PhotoPermission.Set(v)
	case "video_permission":
		return r.VideoPermission.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r UpdateSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.ConferenceID.Valid() {
		m["conference_id"] = r.ConferenceID.Value()
	}
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	if r.Title.Valid() {
		m["title"] = r.Title.Value()
	}
	if r.Abstract.Valid() {
		m["abstract"] = r.Abstract.Value()
	}
	if r.Memo.Valid() {
		m["memo"] = r.Memo.Value()
	}
	if r.Duration.Valid() {
		m["duration"] = r.Duration.Value()
	}
	if r.MaterialLevel.Valid() {
		m["material_level"] = r.MaterialLevel.Value()
	}
	if r.Tags.Valid() {
		m["tags"] = r.Tags.Value()
	}
	if r.Category.Valid() {
		m["category"] = r.Category.Value()
	}
	if r.SpokenLanguage.Valid() {
		m["spoken_language"] = r.SpokenLanguage.Value()
	}
	if r.SlideLanguage.Valid() {
		m["slide_language"] = r.SlideLanguage.Value()
	}
	if r.SlideSubtitles.Valid() {
		m["slide_subtitles"] = r.SlideSubtitles.Value()
	}
	if r.SlideURL.Valid() {
		m["slide_url"] = r.SlideURL.Value()
	}
	if r.VideoURL.Valid() {
		m["video_url"] = r.VideoURL.Value()
	}
	if r.PhotoPermission.Valid() {
		m["photo_permission"] = r.PhotoPermission.Value()
	}
	if r.VideoPermission.Valid() {
		m["video_permission"] = r.VideoPermission.Value()
	}
	if r.SortOrder.Valid() {
		m["sort_order"] = r.SortOrder.Value()
	}
	if r.HasInterpretation.Valid() {
		m["has_interpretation"] = r.HasInterpretation.Value()
	}
	if r.Status.Valid() {
		m["status"] = r.Status.Value()
	}
	if r.Confirmed.Valid() {
		m["confirmed"] = r.Confirmed.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r UpdateSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r UpdateSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *UpdateSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["conference_id"]; ok {
		if err := r.ConferenceID.Set(jv); err != nil {
			return errors.New("set field ConferenceID failed: " + err.Error())
		}
		delete(m, "conference_id")
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["title"]; ok {
		if err := r.Title.Set(jv); err != nil {
			return errors.New("set field Title failed: " + err.Error())
		}
		delete(m, "title")
	}
	if jv, ok := m["abstract"]; ok {
		if err := r.Abstract.Set(jv); err != nil {
			return errors.New("set field Abstract failed: " + err.Error())
		}
		delete(m, "abstract")
	}
	if jv, ok := m["memo"]; ok {
		if err := r.Memo.Set(jv); err != nil {
			return errors.New("set field Memo failed: " + err.Error())
		}
		delete(m, "memo")
	}
	if jv, ok := m["duration"]; ok {
		if err := r.Duration.Set(jv); err != nil {
			return errors.New("set field Duration failed: " + err.Error())
		}
		delete(m, "duration")
	}
	if jv, ok := m["material_level"]; ok {
		if err := r.MaterialLevel.Set(jv); err != nil {
			return errors.New("set field MaterialLevel failed: " + err.Error())
		}
		delete(m, "material_level")
	}
	if jv, ok := m["tags"]; ok {
		if err := r.Tags.Set(jv); err != nil {
			return errors.New("set field Tags failed: " + err.Error())
		}
		delete(m, "tags")
	}
	if jv, ok := m["category"]; ok {
		if err := r.Category.Set(jv); err != nil {
			return errors.New("set field Category failed: " + err.Error())
		}
		delete(m, "category")
	}
	if jv, ok := m["spoken_language"]; ok {
		if err := r.SpokenLanguage.Set(jv); err != nil {
			return errors.New("set field SpokenLanguage failed: " + err.Error())
		}
		delete(m, "spoken_language")
	}
	if jv, ok := m["slide_language"]; ok {
		if err := r.SlideLanguage.Set(jv); err != nil {
			return errors.New("set field SlideLanguage failed: " + err.Error())
		}
		delete(m, "slide_language")
	}
	if jv, ok := m["slide_subtitles"]; ok {
		if err := r.SlideSubtitles.Set(jv); err != nil {
			return errors.New("set field SlideSubtitles failed: " + err.Error())
		}
		delete(m, "slide_subtitles")
	}
	if jv, ok := m["slide_url"]; ok {
		if err := r.SlideURL.Set(jv); err != nil {
			return errors.New("set field SlideURL failed: " + err.Error())
		}
		delete(m, "slide_url")
	}
	if jv, ok := m["video_url"]; ok {
		if err := r.VideoURL.Set(jv); err != nil {
			return errors.New("set field VideoURL failed: " + err.Error())
		}
		delete(m, "video_url")
	}
	if jv, ok := m["photo_permission"]; ok {
		if err := r.PhotoPermission.Set(jv); err != nil {
			return errors.New("set field PhotoPermission failed: " + err.Error())
		}
		delete(m, "photo_permission")
	}
	if jv, ok := m["video_permission"]; ok {
		if err := r.VideoPermission.Set(jv); err != nil {
			return errors.New("set field VideoPermission failed: " + err.Error())
		}
		delete(m, "video_permission")
	}
	if jv, ok := m["sort_order"]; ok {
		if err := r.SortOrder.Set(jv); err != nil {
			return errors.New("set field SortOrder failed: " + err.Error())
		}
		delete(m, "sort_order")
	}
	if jv, ok := m["has_interpretation"]; ok {
		if err := r.HasInterpretation.Set(jv); err != nil {
			return errors.New("set field HasInterpretation failed: " + err.Error())
		}
		delete(m, "has_interpretation")
	}
	if jv, ok := m["status"]; ok {
		if err := r.Status.Set(jv); err != nil {
			return errors.New("set field Status failed: " + err.Error())
		}
		delete(m, "status")
	}
	if jv, ok := m["confirmed"]; ok {
		if err := r.Confirmed.Set(jv); err != nil {
			return errors.New("set field Confirmed failed: " + err.Error())
		}
		delete(m, "confirmed")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"id", "conference_id", "speaker_id", "title", "abstract", "memo", "duration", "material_level", "tags", "category", "spoken_language", "slide_language", "slide_subtitles", "slide_url", "video_url", "photo_permission", "video_permission", "sort_order", "has_interpretation", "status", "confirmed", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateSessionRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "id", "conference_id", "speaker_id", "title", "abstract", "memo", "duration", "material_level", "tags", "category", "spoken_language", "slide_language", "slide_subtitles", "slide_url", "video_url", "photo_permission", "video_permission", "sort_order", "has_interpretation", "status", "confirmed", "user_id"), nil
}

func (r *UpdateSessionRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "conference_id":
		return r.ConferenceID.Set(v)
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "title":
		return r.Title.Set(v)
	case "abstract":
		return r.Abstract.Set(v)
	case "memo":
		return r.Memo.Set(v)
	case "duration":
		return r.Duration.Set(v)
	case "material_level":
		return r.MaterialLevel.Set(v)
	case "tags":
		return r.Tags.Set(v)
	case "category":
		return r.Category.Set(v)
	case "spoken_language":
		return r.SpokenLanguage.Set(v)
	case "slide_language":
		return r.SlideLanguage.Set(v)
	case "slide_subtitles":
		return r.SlideSubtitles.Set(v)
	case "slide_url":
		return r.SlideURL.Set(v)
	case "video_url":
		return r.VideoURL.Set(v)
	case "photo_permission":
		return r.PhotoPermission.Set(v)
	case "video_permission":
		return r.VideoPermission.Set(v)
	case "sort_order":
		return r.SortOrder.Set(v)
	case "has_interpretation":
		return r.HasInterpretation.Set(v)
	case "status":
		return r.Status.Set(v)
	case "confirmed":
		return r.Confirmed.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteSessionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteSessionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteSessionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteSessionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteSessionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r CreateUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.FirstName.Valid() {
		m["first_name"] = r.FirstName.Value()
	}
	if r.LastName.Valid() {
		m["last_name"] = r.LastName.Value()
	}
	m["nickname"] = r.Nickname
	if r.Email.Valid() {
		m["email"] = r.Email.Value()
	}
	m["auth_via"] = r.AuthVia
	m["auth_user_id"] = r.AuthUserID
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	if r.TshirtSize.Valid() {
		m["tshirt_size"] = r.TshirtSize.Value()
	}
	return m
}

func (r CreateUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r CreateUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *CreateUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["first_name"]; ok {
		if err := r.FirstName.Set(jv); err != nil {
			return errors.New("set field FirstName failed: " + err.Error())
		}
		delete(m, "first_name")
	}
	if jv, ok := m["last_name"]; ok {
		if err := r.LastName.Set(jv); err != nil {
			return errors.New("set field LastName failed: " + err.Error())
		}
		delete(m, "last_name")
	}
	if jv, ok := m["nickname"]; ok {
		switch jv.(type) {
		case string:
			r.Nickname = jv.(string)
			delete(m, "nickname")
		default:
			return ErrInvalidJSONFieldType{Field: "nickname"}
		}
	}
	if jv, ok := m["email"]; ok {
		if err := r.Email.Set(jv); err != nil {
			return errors.New("set field Email failed: " + err.Error())
		}
		delete(m, "email")
	}
	if jv, ok := m["auth_via"]; ok {
		switch jv.(type) {
		case string:
			r.AuthVia = jv.(string)
			delete(m, "auth_via")
		default:
			return ErrInvalidJSONFieldType{Field: "auth_via"}
		}
	}
	if jv, ok := m["auth_user_id"]; ok {
		switch jv.(type) {
		case string:
			r.AuthUserID = jv.(string)
			delete(m, "auth_user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "auth_user_id"}
		}
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["tshirt_size"]; ok {
		if err := r.TshirtSize.Set(jv); err != nil {
			return errors.New("set field TshirtSize failed: " + err.Error())
		}
		delete(m, "tshirt_size")
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"first_name", "last_name", "nickname", "email", "auth_via", "auth_user_id", "avatar_url", "tshirt_size"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateUserRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "first_name", "last_name", "nickname", "email", "auth_via", "auth_user_id", "avatar_url", "tshirt_size"), nil
}

func (r *CreateUserRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "first_name":
		return r.FirstName.Set(v)
	case "last_name":
		return r.LastName.Set(v)
	case "nickname":
		if jv, ok := v.(string); ok {
			r.Nickname = jv
			return nil
		}
	case "email":
		return r.Email.Set(v)
	case "auth_via":
		if jv, ok := v.(string); ok {
			r.AuthVia = jv
			return nil
		}
	case "auth_user_id":
		if jv, ok := v.(string); ok {
			r.AuthUserID = jv
			return nil
		}
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "tshirt_size":
		return r.TshirtSize.Set(v)
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.FirstName.Valid() {
		m["first_name"] = r.FirstName.Value()
	}
	if r.LastName.Valid() {
		m["last_name"] = r.LastName.Value()
	}
	if r.Nickname.Valid() {
		m["nickname"] = r.Nickname.Value()
	}
	if r.Email.Valid() {
		m["email"] = r.Email.Value()
	}
	if r.AuthVia.Valid() {
		m["auth_via"] = r.AuthVia.Value()
	}
	if r.AuthUserID.Valid() {
		m["auth_user_id"] = r.AuthUserID.Value()
	}
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	if r.TshirtSize.Valid() {
		m["tshirt_size"] = r.TshirtSize.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r UpdateUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r UpdateUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *UpdateUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["first_name"]; ok {
		if err := r.FirstName.Set(jv); err != nil {
			return errors.New("set field FirstName failed: " + err.Error())
		}
		delete(m, "first_name")
	}
	if jv, ok := m["last_name"]; ok {
		if err := r.LastName.Set(jv); err != nil {
			return errors.New("set field LastName failed: " + err.Error())
		}
		delete(m, "last_name")
	}
	if jv, ok := m["nickname"]; ok {
		if err := r.Nickname.Set(jv); err != nil {
			return errors.New("set field Nickname failed: " + err.Error())
		}
		delete(m, "nickname")
	}
	if jv, ok := m["email"]; ok {
		if err := r.Email.Set(jv); err != nil {
			return errors.New("set field Email failed: " + err.Error())
		}
		delete(m, "email")
	}
	if jv, ok := m["auth_via"]; ok {
		if err := r.AuthVia.Set(jv); err != nil {
			return errors.New("set field AuthVia failed: " + err.Error())
		}
		delete(m, "auth_via")
	}
	if jv, ok := m["auth_user_id"]; ok {
		if err := r.AuthUserID.Set(jv); err != nil {
			return errors.New("set field AuthUserID failed: " + err.Error())
		}
		delete(m, "auth_user_id")
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["tshirt_size"]; ok {
		if err := r.TshirtSize.Set(jv); err != nil {
			return errors.New("set field TshirtSize failed: " + err.Error())
		}
		delete(m, "tshirt_size")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"id", "first_name", "last_name", "nickname", "email", "auth_via", "auth_user_id", "avatar_url", "tshirt_size", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateUserRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "id", "first_name", "last_name", "nickname", "email", "auth_via", "auth_user_id", "avatar_url", "tshirt_size", "user_id"), nil
}

func (r *UpdateUserRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "first_name":
		return r.FirstName.Set(v)
	case "last_name":
		return r.LastName.Set(v)
	case "nickname":
		return r.Nickname.Set(v)
	case "email":
		return r.Email.Set(v)
	case "auth_via":
		return r.AuthVia.Set(v)
	case "auth_user_id":
		return r.AuthUserID.Set(v)
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "tshirt_size":
		return r.TshirtSize.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r LookupUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupUserByAuthUserIDRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["auth_via"] = r.AuthVia
	m["auth_user_id"] = r.AuthUserID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupUserByAuthUserIDRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupUserByAuthUserIDRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupUserByAuthUserIDRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupUserByAuthUserIDRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["auth_via"]; ok {
		switch jv.(type) {
		case string:
			r.AuthVia = jv.(string)
			delete(m, "auth_via")
		default:
			return ErrInvalidJSONFieldType{Field: "auth_via"}
		}
	}
	if jv, ok := m["auth_user_id"]; ok {
		switch jv.(type) {
		case string:
			r.AuthUserID = jv.(string)
			delete(m, "auth_user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "auth_user_id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r DeleteUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r ListUserRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListUserRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListUserRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListUserRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListUserRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Address.Valid() {
		m["address"] = r.Address.Value()
	}
	if r.Longitude.Valid() {
		m["longitude"] = r.Longitude.Value()
	}
	if r.Latitude.Valid() {
		m["latitude"] = r.Latitude.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r CreateVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r CreateVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *CreateVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["address"]; ok {
		if err := r.Address.Set(jv); err != nil {
			return errors.New("set field Address failed: " + err.Error())
		}
		delete(m, "address")
	}
	if jv, ok := m["longitude"]; ok {
		if err := r.Longitude.Set(jv); err != nil {
			return errors.New("set field Longitude failed: " + err.Error())
		}
		delete(m, "longitude")
	}
	if jv, ok := m["latitude"]; ok {
		if err := r.Latitude.Set(jv); err != nil {
			return errors.New("set field Latitude failed: " + err.Error())
		}
		delete(m, "latitude")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"name", "address", "longitude", "latitude", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateVenueRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "name", "address", "longitude", "latitude", "user_id"), nil
}

func (r *CreateVenueRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "name":
		return r.Name.Set(v)
	case "address":
		return r.Address.Set(v)
	case "longitude":
		return r.Longitude.Set(v)
	case "latitude":
		return r.Latitude.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Name.Valid() {
		m["name"] = r.Name.Value()
	}
	if r.Address.Valid() {
		m["address"] = r.Address.Value()
	}
	if r.Longitude.Valid() {
		m["longitude"] = r.Longitude.Value()
	}
	if r.Latitude.Valid() {
		m["latitude"] = r.Latitude.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r UpdateVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r UpdateVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *UpdateVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["name"]; ok {
		if err := r.Name.Set(jv); err != nil {
			return errors.New("set field Name failed: " + err.Error())
		}
		delete(m, "name")
	}
	if jv, ok := m["address"]; ok {
		if err := r.Address.Set(jv); err != nil {
			return errors.New("set field Address failed: " + err.Error())
		}
		delete(m, "address")
	}
	if jv, ok := m["longitude"]; ok {
		if err := r.Longitude.Set(jv); err != nil {
			return errors.New("set field Longitude failed: " + err.Error())
		}
		delete(m, "longitude")
	}
	if jv, ok := m["latitude"]; ok {
		if err := r.Latitude.Set(jv); err != nil {
			return errors.New("set field Latitude failed: " + err.Error())
		}
		delete(m, "latitude")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"id", "name", "address", "longitude", "latitude", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateVenueRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "id", "name", "address", "longitude", "latitude", "user_id"), nil
}

func (r *UpdateVenueRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "name":
		return r.Name.Set(v)
	case "address":
		return r.Address.Set(v)
	case "longitude":
		return r.Longitude.Set(v)
	case "latitude":
		return r.Latitude.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}

func (r ListVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r LookupVenueRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupVenueRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupVenueRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupVenueRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupVenueRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r ListSessionByConferenceRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Date.Valid() {
		m["date"] = r.Date.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r ListSessionByConferenceRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListSessionByConferenceRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListSessionByConferenceRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListSessionByConferenceRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["date"]; ok {
		if err := r.Date.Set(jv); err != nil {
			return errors.New("set field Date failed: " + err.Error())
		}
		delete(m, "date")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r LookupQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r LookupQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	return nil
}

func (r CreateQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["session_id"] = r.SessionID
	m["user_id"] = r.UserID
	m["body"] = r.Body
	return m
}

func (r CreateQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["session_id"]; ok {
		switch jv.(type) {
		case string:
			r.SessionID = jv.(string)
			delete(m, "session_id")
		default:
			return ErrInvalidJSONFieldType{Field: "session_id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if jv, ok := m["body"]; ok {
		switch jv.(type) {
		case string:
			r.Body = jv.(string)
			delete(m, "body")
		default:
			return ErrInvalidJSONFieldType{Field: "body"}
		}
	}
	return nil
}

func (r UpdateQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.SessionID.Valid() {
		m["session_id"] = r.SessionID.Value()
	}
	if r.UserID.Valid() {
		m["user_id"] = r.UserID.Value()
	}
	if r.Body.Valid() {
		m["body"] = r.Body.Value()
	}
	return m
}

func (r UpdateQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["session_id"]; ok {
		if err := r.SessionID.Set(jv); err != nil {
			return errors.New("set field SessionID failed: " + err.Error())
		}
		delete(m, "session_id")
	}
	if jv, ok := m["user_id"]; ok {
		if err := r.UserID.Set(jv); err != nil {
			return errors.New("set field UserID failed: " + err.Error())
		}
		delete(m, "user_id")
	}
	if jv, ok := m["body"]; ok {
		if err := r.Body.Set(jv); err != nil {
			return errors.New("set field Body failed: " + err.Error())
		}
		delete(m, "body")
	}
	return nil
}

func (r DeleteQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r DeleteQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	return nil
}

func (r ListQuestionRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListQuestionRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListQuestionRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListQuestionRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListQuestionRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateSessionSurveyResponseRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	if r.UserID.Valid() {
		m["user_id"] = r.UserID.Value()
	}
	if r.SessionID.Valid() {
		m["session_id"] = r.SessionID.Value()
	}
	m["user_prior_knowledge"] = r.UserPriorKnowledge
	m["speaker_knowledge"] = r.SpeakerKnowledge
	m["material_quality"] = r.MaterialQuality
	m["overall_rating"] = r.OverallRating
	if r.CommentGood.Valid() {
		m["comment_good"] = r.CommentGood.Value()
	}
	if r.CommentImprovement.Valid() {
		m["comment_improvement"] = r.CommentImprovement.Value()
	}
	return m
}

func (r CreateSessionSurveyResponseRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateSessionSurveyResponseRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateSessionSurveyResponseRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateSessionSurveyResponseRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["user_id"]; ok {
		if err := r.UserID.Set(jv); err != nil {
			return errors.New("set field UserID failed: " + err.Error())
		}
		delete(m, "user_id")
	}
	if jv, ok := m["session_id"]; ok {
		if err := r.SessionID.Set(jv); err != nil {
			return errors.New("set field SessionID failed: " + err.Error())
		}
		delete(m, "session_id")
	}
	if jv, ok := m["user_prior_knowledge"]; ok {
		switch jv.(type) {
		case float64:
			r.UserPriorKnowledge = int(jv.(float64))
			delete(m, "user_prior_knowledge")
		default:
			return ErrInvalidJSONFieldType{Field: "user_prior_knowledge"}
		}
	}
	if jv, ok := m["speaker_knowledge"]; ok {
		switch jv.(type) {
		case float64:
			r.SpeakerKnowledge = int(jv.(float64))
			delete(m, "speaker_knowledge")
		default:
			return ErrInvalidJSONFieldType{Field: "speaker_knowledge"}
		}
	}
	if jv, ok := m["material_quality"]; ok {
		switch jv.(type) {
		case float64:
			r.MaterialQuality = int(jv.(float64))
			delete(m, "material_quality")
		default:
			return ErrInvalidJSONFieldType{Field: "material_quality"}
		}
	}
	if jv, ok := m["overall_rating"]; ok {
		switch jv.(type) {
		case float64:
			r.OverallRating = int(jv.(float64))
			delete(m, "overall_rating")
		default:
			return ErrInvalidJSONFieldType{Field: "overall_rating"}
		}
	}
	if jv, ok := m["comment_good"]; ok {
		if err := r.CommentGood.Set(jv); err != nil {
			return errors.New("set field CommentGood failed: " + err.Error())
		}
		delete(m, "comment_good")
	}
	if jv, ok := m["comment_improvement"]; ok {
		if err := r.CommentImprovement.Set(jv); err != nil {
			return errors.New("set field CommentImprovement failed: " + err.Error())
		}
		delete(m, "comment_improvement")
	}
	return nil
}

func (r CreateClientRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["name"] = r.Name
	return m
}

func (r CreateClientRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r CreateClientRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *CreateClientRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateClientRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			r.Name = jv.(string)
			delete(m, "name")
		default:
			return ErrInvalidJSONFieldType{Field: "name"}
		}
	}
	return nil
}

func (r LookupClientRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	return m
}

func (r LookupClientRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupClientRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupClientRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupClientRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	return nil
}

func (r UpdateClientRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["secret"] = r.Secret
	m["name"] = r.Name
	return m
}

func (r UpdateClientRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r UpdateClientRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *UpdateClientRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateClientRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["secret"]; ok {
		switch jv.(type) {
		case string:
			r.Secret = jv.(string)
			delete(m, "secret")
		default:
			return ErrInvalidJSONFieldType{Field: "secret"}
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			r.Name = jv.(string)
			delete(m, "name")
		default:
			return ErrInvalidJSONFieldType{Field: "name"}
		}
	}
	return nil
}

func (r LookupFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	return m
}

func (r LookupFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r LookupFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *LookupFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *LookupFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	return nil
}

func (r ListFeaturedSpeakersRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.Since.Valid() {
		m["since"] = r.Since.Value()
	}
	if r.Lang.Valid() {
		m["lang"] = r.Lang.Value()
	}
	if r.Limit.Valid() {
		m["limit"] = r.Limit.Value()
	}
	return m
}

func (r ListFeaturedSpeakersRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r ListFeaturedSpeakersRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *ListFeaturedSpeakersRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *ListFeaturedSpeakersRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["since"]; ok {
		if err := r.Since.Set(jv); err != nil {
			return errors.New("set field Since failed: " + err.Error())
		}
		delete(m, "since")
	}
	if jv, ok := m["lang"]; ok {
		if err := r.Lang.Set(jv); err != nil {
			return errors.New("set field Lang failed: " + err.Error())
		}
		delete(m, "lang")
	}
	if jv, ok := m["limit"]; ok {
		if err := r.Limit.Set(jv); err != nil {
			return errors.New("set field Limit failed: " + err.Error())
		}
		delete(m, "limit")
	}
	return nil
}

func (r CreateFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["conference_id"] = r.ConferenceID
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	m["display_name"] = r.DisplayName
	m["description"] = r.Description
	m["user_id"] = r.UserID
	return m
}

func (r CreateFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r CreateFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *CreateFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *CreateFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["conference_id"]; ok {
		switch jv.(type) {
		case string:
			r.ConferenceID = jv.(string)
			delete(m, "conference_id")
		default:
			return ErrInvalidJSONFieldType{Field: "conference_id"}
		}
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["display_name"]; ok {
		switch jv.(type) {
		case string:
			r.DisplayName = jv.(string)
			delete(m, "display_name")
		default:
			return ErrInvalidJSONFieldType{Field: "display_name"}
		}
	}
	if jv, ok := m["description"]; ok {
		switch jv.(type) {
		case string:
			r.Description = jv.(string)
			delete(m, "description")
		default:
			return ErrInvalidJSONFieldType{Field: "description"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"conference_id", "speaker_id", "avatar_url", "display_name", "description", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *CreateFeaturedSpeakerRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "conference_id", "speaker_id", "avatar_url", "display_name", "description", "user_id"), nil
}

func (r *CreateFeaturedSpeakerRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "conference_id":
		if jv, ok := v.(string); ok {
			r.ConferenceID = jv
			return nil
		}
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "display_name":
		if jv, ok := v.(string); ok {
			r.DisplayName = jv
			return nil
		}
	case "description":
		if jv, ok := v.(string); ok {
			r.Description = jv
			return nil
		}
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r UpdateFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	if r.SpeakerID.Valid() {
		m["speaker_id"] = r.SpeakerID.Value()
	}
	if r.AvatarURL.Valid() {
		m["avatar_url"] = r.AvatarURL.Value()
	}
	if r.DisplayName.Valid() {
		m["display_name"] = r.DisplayName.Value()
	}
	if r.Description.Valid() {
		m["description"] = r.Description.Value()
	}
	m["user_id"] = r.UserID
	return m
}

func (r UpdateFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, r.L10N)
}

func (r UpdateFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return tools.MarshalURLWithL10N(buf, r.L10N)
}

func (r *UpdateFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *UpdateFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["speaker_id"]; ok {
		if err := r.SpeakerID.Set(jv); err != nil {
			return errors.New("set field SpeakerID failed: " + err.Error())
		}
		delete(m, "speaker_id")
	}
	if jv, ok := m["avatar_url"]; ok {
		if err := r.AvatarURL.Set(jv); err != nil {
			return errors.New("set field AvatarURL failed: " + err.Error())
		}
		delete(m, "avatar_url")
	}
	if jv, ok := m["display_name"]; ok {
		if err := r.DisplayName.Set(jv); err != nil {
			return errors.New("set field DisplayName failed: " + err.Error())
		}
		delete(m, "display_name")
	}
	if jv, ok := m["description"]; ok {
		if err := r.Description.Set(jv); err != nil {
			return errors.New("set field Description failed: " + err.Error())
		}
		delete(m, "description")
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	if err := tools.ExtractL10NFields(m, &r.L10N, []string{"id", "speaker_id", "avatar_url", "display_name", "description", "user_id"}); err != nil {
		return err
	}
	return nil
}

func (r *UpdateFeaturedSpeakerRequest) GetPropNames() ([]string, error) {
	l, _ := r.L10N.GetPropNames()
	return append(l, "id", "speaker_id", "avatar_url", "display_name", "description", "user_id"), nil
}

func (r *UpdateFeaturedSpeakerRequest) SetPropValue(s string, v interface{}) error {
	switch s {
	case "id":
		if jv, ok := v.(string); ok {
			r.ID = jv
			return nil
		}
	case "speaker_id":
		return r.SpeakerID.Set(v)
	case "avatar_url":
		return r.AvatarURL.Set(v)
	case "display_name":
		return r.DisplayName.Set(v)
	case "description":
		return r.Description.Set(v)
	case "user_id":
		if jv, ok := v.(string); ok {
			r.UserID = jv
			return nil
		}
	default:
		return errors.New("unknown column '" + s + "'")
	}
	return ErrInvalidFieldType{Field: s}
}

func (r DeleteFeaturedSpeakerRequest) collectMarshalData() map[string]interface{} {
	m := make(map[string]interface{})
	m["id"] = r.ID
	m["user_id"] = r.UserID
	return m
}

func (r DeleteFeaturedSpeakerRequest) MarshalJSON() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r DeleteFeaturedSpeakerRequest) MarshalURL() ([]byte, error) {
	m := r.collectMarshalData()
	buf, err := urlenc.Marshal(m)
	if err != nil {
		return nil, err
	}
	return buf, nil
}

func (r *DeleteFeaturedSpeakerRequest) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	return r.Populate(m)
}

func (r *DeleteFeaturedSpeakerRequest) Populate(m map[string]interface{}) error {
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			r.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidJSONFieldType{Field: "id"}
		}
	}
	if jv, ok := m["user_id"]; ok {
		switch jv.(type) {
		case string:
			r.UserID = jv.(string)
			delete(m, "user_id")
		default:
			return ErrInvalidJSONFieldType{Field: "user_id"}
		}
	}
	return nil
}
