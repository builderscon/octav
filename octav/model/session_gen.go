package model

// Automatically generated by genmodel utility. DO NOT EDIT!

import (
	"encoding/json"
	"time"

	"github.com/builderscon/octav/octav/db"
	"github.com/builderscon/octav/octav/tools"
	"github.com/lestrrat/go-pdebug"
)

var _ = time.Time{}

type SessionL10N struct {
	Session
	L10N tools.LocalizedFields `json:"-"`
}
type SessionL10NList []SessionL10N

func (v SessionL10N) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal(v.Session)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, v.L10N)
}

func (v *Session) Load(tx *db.Tx, id string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("model.Session.Load %s", id).BindError(&err)
		defer g.End()
	}
	vdb := db.Session{}
	if err := vdb.LoadByEID(tx, id); err != nil {
		return err
	}

	if err := v.FromRow(vdb); err != nil {
		return err
	}
	return nil
}

func (v *Session) FromRow(vdb db.Session) error {
	v.ID = vdb.EID
	v.ConferenceID = vdb.ConferenceID
	if vdb.RoomID.Valid {
		v.RoomID = vdb.RoomID.String
	}
	v.SpeakerID = vdb.SpeakerID
	if vdb.Title.Valid {
		v.Title = vdb.Title.String
	}
	if vdb.Abstract.Valid {
		v.Abstract = vdb.Abstract.String
	}
	if vdb.Memo.Valid {
		v.Memo = vdb.Memo.String
	}
	if vdb.StartsOn.Valid {
		v.StartsOn = vdb.StartsOn.Time
	}
	v.Duration = vdb.Duration
	if vdb.MaterialLevel.Valid {
		v.MaterialLevel = vdb.MaterialLevel.String
	}
	if vdb.Tags.Valid {
		v.Tags = TagString(vdb.Tags.String)
	}
	if vdb.Category.Valid {
		v.Category = vdb.Category.String
	}
	if vdb.SpokenLanguage.Valid {
		v.SpokenLanguage = vdb.SpokenLanguage.String
	}
	if vdb.SlideLanguage.Valid {
		v.SlideLanguage = vdb.SlideLanguage.String
	}
	if vdb.SlideSubtitles.Valid {
		v.SlideSubtitles = vdb.SlideSubtitles.String
	}
	if vdb.SlideURL.Valid {
		v.SlideURL = vdb.SlideURL.String
	}
	if vdb.VideoURL.Valid {
		v.VideoURL = vdb.VideoURL.String
	}
	if vdb.PhotoPermission.Valid {
		v.PhotoPermission = vdb.PhotoPermission.String
	}
	if vdb.VideoPermission.Valid {
		v.VideoPermission = vdb.VideoPermission.String
	}
	v.HasInterpretation = vdb.HasInterpretation
	v.Status = vdb.Status
	v.Confirmed = vdb.Confirmed
	return nil
}

func (v *Session) ToRow(vdb *db.Session) error {
	vdb.EID = v.ID
	vdb.ConferenceID = v.ConferenceID
	vdb.RoomID.Valid = true
	vdb.RoomID.String = v.RoomID
	vdb.SpeakerID = v.SpeakerID
	vdb.Title.Valid = true
	vdb.Title.String = v.Title
	vdb.Abstract.Valid = true
	vdb.Abstract.String = v.Abstract
	vdb.Memo.Valid = true
	vdb.Memo.String = v.Memo
	vdb.StartsOn.Valid = true
	vdb.StartsOn.Time = v.StartsOn
	vdb.Duration = v.Duration
	vdb.MaterialLevel.Valid = true
	vdb.MaterialLevel.String = v.MaterialLevel
	vdb.Tags.Valid = true
	vdb.Tags.String = string(v.Tags)
	vdb.Category.Valid = true
	vdb.Category.String = v.Category
	vdb.SpokenLanguage.Valid = true
	vdb.SpokenLanguage.String = v.SpokenLanguage
	vdb.SlideLanguage.Valid = true
	vdb.SlideLanguage.String = v.SlideLanguage
	vdb.SlideSubtitles.Valid = true
	vdb.SlideSubtitles.String = v.SlideSubtitles
	vdb.SlideURL.Valid = true
	vdb.SlideURL.String = v.SlideURL
	vdb.VideoURL.Valid = true
	vdb.VideoURL.String = v.VideoURL
	vdb.PhotoPermission.Valid = true
	vdb.PhotoPermission.String = v.PhotoPermission
	vdb.VideoPermission.Valid = true
	vdb.VideoPermission.String = v.VideoPermission
	vdb.HasInterpretation = v.HasInterpretation
	vdb.Status = v.Status
	vdb.Confirmed = v.Confirmed
	return nil
}

func (v SessionL10N) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "title", "abstract"), nil
}

func (v SessionL10N) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "conference_id":
		return v.ConferenceID, nil
	case "room_id":
		return v.RoomID, nil
	case "speaker_id":
		return v.SpeakerID, nil
	case "title":
		return v.Title, nil
	case "abstract":
		return v.Abstract, nil
	case "memo":
		return v.Memo, nil
	case "starts_on":
		return v.StartsOn, nil
	case "duration":
		return v.Duration, nil
	case "material_level":
		return v.MaterialLevel, nil
	case "tags":
		return v.Tags, nil
	case "category":
		return v.Category, nil
	case "spoken_language":
		return v.SpokenLanguage, nil
	case "slide_language":
		return v.SlideLanguage, nil
	case "slide_subtitles":
		return v.SlideSubtitles, nil
	case "slide_url":
		return v.SlideURL, nil
	case "video_url":
		return v.VideoURL, nil
	case "photo_permission":
		return v.PhotoPermission, nil
	case "video_permission":
		return v.VideoPermission, nil
	case "has_interpretation":
		return v.HasInterpretation, nil
	case "status":
		return v.Status, nil
	case "confirmed":
		return v.Confirmed, nil
	case "conference":
		return v.Conference, nil
	case "room":
		return v.Room, nil
	case "speaker":
		return v.Speaker, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v *SessionL10N) UnmarshalJSON(data []byte) error {
	var s Session
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	v.Session = s
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}

	if err := tools.ExtractL10NFields(m, &v.L10N, []string{"title", "abstract"}); err != nil {
		return err
	}

	return nil
}

func (v *SessionL10N) LoadLocalizedFields(tx *db.Tx) error {
	ls, err := db.LoadLocalizedStringsForParent(tx, v.Session.ID, "Session")
	if err != nil {
		return err
	}

	if len(ls) > 0 {
		v.L10N = tools.LocalizedFields{}
		for _, l := range ls {
			v.L10N.Set(l.Language, l.Name, l.Localized)
		}
	}
	return nil
}
