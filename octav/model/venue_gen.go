package model

// Automatically generated by genmodel utility. DO NOT EDIT!

import (
	"encoding/json"
	"time"

	"github.com/builderscon/octav/octav/db"
	"github.com/builderscon/octav/octav/tools"
	"github.com/lestrrat/go-pdebug"
)

var _ = time.Time{}

type VenueL10N struct {
	Venue
	L10N tools.LocalizedFields `json:"-"`
}
type VenueL10NList []VenueL10N

func (v VenueL10N) MarshalJSON() ([]byte, error) {
	buf, err := json.Marshal(v.Venue)
	if err != nil {
		return nil, err
	}
	return tools.MarshalJSONWithL10N(buf, v.L10N)
}

func (v *Venue) Load(tx *db.Tx, id string) (err error) {
	if pdebug.Enabled {
		g := pdebug.Marker("model.Venue.Load %s", id).BindError(&err)
		defer g.End()
	}
	vdb := db.Venue{}
	if err := vdb.LoadByEID(tx, id); err != nil {
		return err
	}

	if err := v.FromRow(vdb); err != nil {
		return err
	}
	return nil
}

func (v *Venue) FromRow(vdb db.Venue) error {
	v.ID = vdb.EID
	v.Name = vdb.Name
	v.Address = vdb.Address
	v.Longitude = vdb.Longitude
	v.Latitude = vdb.Latitude
	return nil
}

func (v *Venue) ToRow(vdb *db.Venue) error {
	vdb.EID = v.ID
	vdb.Name = v.Name
	vdb.Address = v.Address
	vdb.Longitude = v.Longitude
	vdb.Latitude = v.Latitude
	return nil
}

func (v VenueL10N) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "name", "address"), nil
}

func (v VenueL10N) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "name":
		return v.Name, nil
	case "address":
		return v.Address, nil
	case "longitude":
		return v.Longitude, nil
	case "latitude":
		return v.Latitude, nil
	case "rooms":
		return v.Rooms, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v *VenueL10N) UnmarshalJSON(data []byte) error {
	var s Venue
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}

	v.Venue = s
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}

	if err := tools.ExtractL10NFields(m, &v.L10N, []string{"name", "address"}); err != nil {
		return err
	}

	return nil
}

func (v *VenueL10N) LoadLocalizedFields(tx *db.Tx) error {
	ls, err := db.LoadLocalizedStringsForParent(tx, v.Venue.ID, "Venue")
	if err != nil {
		return err
	}

	if len(ls) > 0 {
		v.L10N = tools.LocalizedFields{}
		for _, l := range ls {
			v.L10N.Set(l.Language, l.Name, l.Localized)
		}
	}
	return nil
}
