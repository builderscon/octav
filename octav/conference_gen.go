// Automatically generated by genmodel utility. DO NOT EDIT!
package octav

import "encoding/json"

func (v Conference) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "id", "title", "subtitle", "slug", "dates"), nil
}

func (v Conference) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "title":
		return v.Title, nil
	case "subtitle":
		return v.SubTitle, nil
	case "slug":
		return v.Slug, nil
	case "dates":
		return v.Dates, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v Conference) MarshalJSON() ([]byte, error) {
	m := make(map[string]interface{})
	m["id"] = v.ID
	m["title"] = v.Title
	m["subtitle"] = v.SubTitle
	m["slug"] = v.Slug
	m["dates"] = v.Dates
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return marshalJSONWithL10N(buf, v.L10N)
}
func (v *Conference) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			v.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["title"]; ok {
		switch jv.(type) {
		case string:
			v.Title = jv.(string)
			delete(m, "title")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["subtitle"]; ok {
		switch jv.(type) {
		case string:
			v.SubTitle = jv.(string)
			delete(m, "subtitle")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["slug"]; ok {
		switch jv.(type) {
		case string:
			v.Slug = jv.(string)
			delete(m, "slug")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["dates"]; ok {
		switch jv.(type) {
		case []ConferenceDate:
			v.Dates = jv.([]ConferenceDate)
			delete(m, "dates")
		default:
			return ErrInvalidFieldType
		}
	}
	return nil
}
