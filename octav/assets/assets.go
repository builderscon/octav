// Code generated by go-bindata.
// sources:
// templates/en/eml/confirm_registration.eml
// templates/en/eml/proposal-accepted.eml
// templates/en/eml/proposal-rejected.eml
// templates/ja/eml/proposal-accepted.eml
// templates/ja/eml/proposal-rejected.eml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesEnEmlConfirm_registrationEml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcd\xb1\x4a\x04\x31\x10\xc6\xf1\xfe\x9e\xe2\xf3\x1e\xe0\xd2\x0b\x62\x61\x69\x63\x61\x2f\xb9\xec\xdc\x66\x48\x2e\x23\x93\x09\x6b\x08\x79\x77\xd1\xdb\x62\xab\x81\x81\xef\xf7\x1f\x03\x2b\x99\xd1\x8f\xe1\xfc\x19\x7d\x49\xe8\xd2\x70\x13\x85\xd2\xca\xd5\x48\xb9\xac\xe8\xa2\x0d\x74\xf7\x9c\xb1\xb1\x45\x5c\x1b\xe7\x85\xb4\x06\x29\x4f\x67\xcc\x79\x3a\x1d\x9d\x8f\x4c\xbe\x12\x42\xe6\x90\x20\x05\x16\x09\x99\x4b\xc2\x95\xb2\x6c\x30\x41\x90\x72\x63\xbd\xff\xb5\x74\x77\xfd\xb2\x28\xd5\xfa\xd0\x80\x68\xf6\x5d\x9f\x9d\x3b\x94\x2e\x2c\xae\x55\x52\xf7\x3f\x70\xbb\xf1\xba\x5f\x6f\x2c\xe5\x2b\x51\x7f\x19\x03\x97\xb7\xc3\xf3\x9d\x3a\xe6\xfc\x0d\x00\x00\xff\xff\x0c\xc7\x10\x45\xe9\x00\x00\x00")

func templatesEnEmlConfirm_registrationEmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnEmlConfirm_registrationEml,
		"templates/en/eml/confirm_registration.eml",
	)
}

func templatesEnEmlConfirm_registrationEml() (*asset, error) {
	bytes, err := templatesEnEmlConfirm_registrationEmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/en/eml/confirm_registration.eml", size: 233, mode: os.FileMode(420), modTime: time.Unix(1477537231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnEmlProposalAcceptedEml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xc1\x4e\x1b\x31\x10\xbd\xfb\x2b\x46\x39\xa2\xb0\x09\xa8\xed\x21\x57\x02\x22\x6a\x49\x2a\x12\x84\x7a\x9c\x78\x27\xbb\x2e\x5e\xcf\xe2\x99\x4d\x94\xa2\xfc\x7b\x65\x6f\x48\x0b\xa8\xc7\x5e\xfd\xc6\x6f\x9e\xde\x7b\x33\x25\x8c\xf0\xf2\x02\xc5\xb2\x25\x7c\xa2\x58\xcc\x9d\x7d\x0a\xd8\x10\x1c\x0e\xc6\xfc\xe0\x2e\x42\x1b\xb9\x65\x41\x0f\x83\x34\xb7\x72\xea\x13\x38\x80\x1a\x05\xd6\x44\x01\xd0\x5a\x6a\x95\xca\xc2\x98\xc1\x2d\xef\x68\x4b\x71\x08\x67\x67\x67\xb0\x23\x88\xf4\xdc\xb9\x48\xb0\xe9\xa2\xd6\x14\x01\xad\x3a\x0e\x19\xe5\x00\xfb\xc4\xbf\xa6\x1a\xfd\x06\x94\xc1\x72\xd3\x7a\x52\x02\xad\xc9\x9c\xd6\xb6\x91\x2d\x89\x14\xf0\xdd\x13\x0a\xc1\xd6\x89\xd3\x34\x02\x1b\xf6\x9e\x77\x2e\x54\xd0\x62\x45\x43\xc0\x50\xc2\xd5\x62\x7e\x33\xbb\xbf\x03\xad\x51\x13\x3f\x60\x24\x83\x6b\x4f\x69\x01\xaa\x52\x28\xf3\x5c\x1b\x49\x28\x68\x2f\x41\x48\x24\xc9\xc2\x9e\x57\x6c\x4d\x65\x97\xbe\x24\x92\x1d\x41\x8d\xdb\x24\x28\xff\xa0\x32\x31\xed\xb9\x9b\x18\x03\x50\xab\xb6\x32\x19\x8d\xd6\x9d\xf3\x25\x45\xb1\x1c\x0a\xc7\xa3\xe4\xd4\x15\x87\x0d\x45\x0a\x96\x8a\x25\x45\x47\x52\x2c\x7d\x57\xc1\xe1\xf0\x01\x3d\x3e\x1f\x55\x8c\x2c\x87\x8d\x8b\x4d\xb6\x1f\xee\x1e\x96\x2b\x38\xbe\xbc\x15\xeb\x02\x70\x2c\x29\xbe\x77\x0e\x3e\x38\x67\x66\x9b\x6c\xc5\x74\x01\xf3\xc5\x3b\xb6\xde\x12\x0c\x96\xe0\x71\xb6\xba\x9d\xcd\x61\x31\xbf\x86\xc7\xeb\xeb\xaf\xc3\x3e\x3f\xa1\xb8\xed\x79\xa3\xab\x6a\x35\xca\x50\x3a\x79\xee\xd0\xbb\xcd\xbe\xe7\x38\x2d\xdc\x39\xad\xb9\x53\xd8\x61\x0c\x2e\x54\x7d\x22\x42\x9e\xac\x02\x06\xce\x0d\xe0\x90\xa3\x50\x7c\x22\xe3\x54\xa0\xf5\x68\xa9\x30\x66\x59\x73\xe7\xcb\xac\x33\xd9\x0d\x18\xf6\x59\xa9\x77\x56\x25\x33\xff\x3b\x1b\x38\x65\x33\x84\x36\xb7\xc4\xfc\x69\x89\x3d\x39\x9d\x6b\x92\x35\x59\x0e\x8a\xb6\xc7\x39\x56\x18\xdc\x2f\x8a\x02\x28\x20\x9c\x7a\x20\xd0\xb2\x88\x5b\x7b\x1a\x82\xb0\x79\xdd\xd5\xe0\x3e\x1b\xd6\xb4\x9a\xeb\x54\xfe\xec\xe4\x6d\x65\x8a\x54\x8a\x87\xfb\x6f\x93\xff\xd2\x8c\x04\xcf\xa6\xe9\x34\x01\xf2\x21\x4e\xe0\xef\x9b\x34\x00\x53\x54\x1a\xad\x5c\x73\x44\x96\x8a\x51\x65\x11\x8a\x1b\x8e\x0d\x2a\x0c\x2e\xc7\xe3\x2f\xe7\xe3\x8b\xf3\xf1\x25\x5c\x7c\x9e\x8c\x3f\x0d\xf2\x9d\xdf\x53\x85\xb1\x94\xa1\x79\xb7\xff\x95\x18\x56\x84\xcd\xef\x00\x00\x00\xff\xff\xdb\x9f\x0c\xac\x2b\x04\x00\x00")

func templatesEnEmlProposalAcceptedEmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnEmlProposalAcceptedEml,
		"templates/en/eml/proposal-accepted.eml",
	)
}

func templatesEnEmlProposalAcceptedEml() (*asset, error) {
	bytes, err := templatesEnEmlProposalAcceptedEmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/en/eml/proposal-accepted.eml", size: 1067, mode: os.FileMode(420), modTime: time.Unix(1477618712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEnEmlProposalRejectedEml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x6a\xc3\x30\x14\x44\xf7\x3a\xc5\x90\xb5\xf1\x25\x72\x80\x96\xd6\x3d\xc0\xaf\x3d\xb6\x45\xe4\x2f\xf1\xf5\x4d\x08\x21\x77\x2f\x32\x6d\x17\x81\xec\x84\xd0\xbc\x37\xa3\x61\x15\xbd\xe0\x96\x77\xcc\xd9\xe0\x72\x89\xba\xc0\x57\xc2\xe3\x46\x78\x86\xb1\x96\xac\x53\x3b\xb6\xeb\xfb\x1d\xfd\x39\xeb\x4c\xa3\x8e\xec\x87\xe8\x89\x78\x3c\xc2\x59\x52\x3a\x10\xef\x96\x4b\xae\x92\x6a\x1f\xc2\x97\xce\xd9\x7c\x57\x71\xa6\x5b\x87\x2b\x71\xa5\x11\x9a\x1d\xf2\x9d\x0e\xbc\x8c\x23\x8b\xb7\x02\x86\xf2\x1b\xed\x70\x6a\x9a\x3f\xf6\xa9\x0f\xe1\x4d\x47\x42\x16\x89\xda\xc1\x5b\xe5\x7a\xc8\x9e\x62\xa2\x53\x93\xac\xb9\xb0\xbd\x3a\xb0\x30\x6e\x12\x15\x51\x9d\xc6\xea\x9c\x42\x54\x14\x63\xa5\x7a\x1b\x2b\xfe\x3c\xea\x93\x16\x59\xff\xfd\x88\x7a\x4c\x9f\x77\xdf\x8d\x7d\x08\x1f\x5c\xc4\xa6\xda\x85\x17\x9f\x81\x81\xb2\xfd\x04\x00\x00\xff\xff\xce\xa8\x16\x7b\x59\x01\x00\x00")

func templatesEnEmlProposalRejectedEmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesEnEmlProposalRejectedEml,
		"templates/en/eml/proposal-rejected.eml",
	)
}

func templatesEnEmlProposalRejectedEml() (*asset, error) {
	bytes, err := templatesEnEmlProposalRejectedEmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/en/eml/proposal-rejected.eml", size: 345, mode: os.FileMode(420), modTime: time.Unix(1477625776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJaEmlProposalAcceptedEml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\x5d\x4f\x1a\x5b\x14\x7d\x9f\x5f\x71\xc2\xa3\x09\x1f\x9a\x7b\xef\x03\xaf\xd7\xdc\xe4\x26\x4d\x9b\x14\xfb\x03\x28\x1d\xdb\x89\x02\x86\x19\x9f\x0c\xc9\xec\x73\xfc\x40\x66\x2c\x56\x41\xc5\x8f\x02\x55\xfc\x60\x2c\xd4\xd4\x1a\x84\xb6\xfc\x98\x3d\x67\x18\xfe\x45\x73\x86\xa1\xa2\xb6\x8f\x7d\x3b\x73\xce\xec\xb5\xd6\x5e\x6b\xef\xa5\x25\x12\x8a\x2d\xc8\xf1\x39\x39\x13\x7a\xaa\x24\xe6\x52\xf1\xa4\x4c\xb2\x59\xe7\x6c\x4f\x92\x78\xef\x90\x1b\x15\x84\x65\x84\x0a\x42\xd5\x3b\x9c\xfa\x9f\x6c\x17\xd9\x47\x64\x47\xc8\xbe\x22\xbd\x41\x66\x91\x80\x80\x9a\x51\xb4\x79\x51\x1f\x20\x08\xa6\xf3\xb6\xd6\x2f\x9e\x23\x94\x90\x9a\x1e\xc4\x36\xc2\x39\xd2\x2d\x84\x7c\xbf\x52\x47\xba\x8e\x70\x30\x42\xdf\x45\xf8\x8e\x50\x46\x9d\x4a\x12\x6f\x5d\x38\x95\xae\x4f\x41\xbb\x48\x6f\x91\x6e\xf1\xa6\x69\x77\x56\xc5\x2f\xd4\x40\xb0\x10\x5a\x64\x62\x62\x82\xf4\xcb\x5d\x7e\xbc\xd6\xff\xd0\x71\x1b\x1b\x48\xb7\xdc\x9a\x89\x70\x7c\x27\x53\xa8\x2e\xf0\xde\x8a\x7b\x0a\x08\x26\x02\x45\x9a\x1f\x32\x89\x6a\xc1\xe6\x98\x6b\xbc\xb9\xff\x53\xa4\xb3\x5b\x77\xca\x14\xc1\x72\x0e\x2f\x91\x9e\x20\x2b\x23\xfb\x8c\x2c\xe7\x51\x16\x9d\xa3\x3a\xaf\x5e\x8f\x61\x6f\x0c\xf9\xc7\x6e\xde\x21\x35\x78\xf5\x9a\x6f\xe6\x10\x5a\x76\xdb\x70\xcf\xf7\x10\x9a\x12\xb2\x12\xd2\x0b\xe1\x16\xab\x22\xcd\x21\xcd\xff\x5e\x79\xc1\x03\x2a\x09\x50\x61\x07\x21\x6f\x34\x6d\x41\x8d\x86\xc3\x2f\x17\x95\xf9\x57\x72\x46\x4d\xa4\x53\x21\x25\x1d\x16\x86\xff\x9b\x4e\xcd\xca\x19\x39\x95\x90\x43\x31\x39\xa3\xc8\x6a\x28\x36\xbf\xf8\x9a\x64\xb3\x8f\x5e\xfd\x6b\x55\x56\x55\x25\x9d\x0a\x27\xd2\xa9\x59\x25\x93\x94\xa4\x7b\x3a\xc0\x9c\x1c\xe8\x57\x83\x9d\x6d\xbb\x5b\xe7\xab\x2b\x5e\xd7\x8d\x91\x39\x0d\x84\x65\xbf\x35\x1d\x1e\x4f\x00\x42\x73\x94\xb8\xc9\x0b\x3b\x48\xf3\xce\x4d\xce\xaf\xa5\x06\x2f\xb4\x5c\xf6\xcd\xd1\xcf\x10\x4c\x69\x3c\x08\x84\x26\xc2\x99\xb8\x11\x43\x60\x78\x63\xb1\x8f\x50\xb4\x3b\xab\xce\x7a\xcf\x6e\x1b\x63\x56\xd8\xdd\x3c\x3f\x78\xef\x14\x36\xfb\x27\x1d\xef\xfa\xe0\x7e\xd4\xde\x41\x8c\xcb\x15\xd2\x36\xb2\xba\xe7\xb7\x85\x60\xf1\x52\x61\x20\x0c\x1e\x8e\xc0\x5d\x40\x03\xbd\x82\x74\x59\xd0\x82\x85\xd4\xf2\xb2\x2e\x21\xad\x21\xbb\x14\x67\x7a\x2b\xd9\xed\x2e\xa7\x97\xae\x3e\xf4\xa2\x38\xd0\x8f\xfb\x5f\x6a\x0f\x32\x1a\xf6\xe6\x77\x21\x9c\xfa\xf4\x2b\x11\x4d\xb7\xd1\x73\x4a\xd7\xde\x02\x3c\x96\xbe\x31\xb6\x00\x84\xbc\x78\xfe\x24\xfa\x47\x62\x17\xcf\xff\x4f\x93\x6c\x56\x22\xc4\x5b\xd6\x28\x19\xdf\x5b\x89\x90\xe9\xb8\x26\x87\x67\x94\xa4\xff\x12\xd3\xe2\x19\x4d\x7d\x96\x0a\xfd\x97\xce\x24\xe3\x1a\x09\x4c\x45\x22\xff\x04\x23\x93\xc1\xc8\x14\x99\xfc\x3b\x1a\xf9\x2b\x20\xca\xa4\x60\x30\x28\x3d\xa0\x1e\x61\x12\x64\x30\x1c\xfc\x1f\x01\x00\x00\xff\xff\x45\x2b\x1a\xe7\x6d\x04\x00\x00")

func templatesJaEmlProposalAcceptedEmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJaEmlProposalAcceptedEml,
		"templates/ja/eml/proposal-accepted.eml",
	)
}

func templatesJaEmlProposalAcceptedEml() (*asset, error) {
	bytes, err := templatesJaEmlProposalAcceptedEmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ja/eml/proposal-accepted.eml", size: 1133, mode: os.FileMode(420), modTime: time.Unix(1477619705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJaEmlProposalRejectedEml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\x6d\x6e\x12\x5f\x18\xc5\xbf\xcf\x2a\xd8\x00\xdd\xc4\x7f\x09\x7f\x77\x60\xc6\xa4\x89\xa9\x49\xf5\x5b\xd3\x64\xce\x1d\xc5\xce\x0b\x85\x20\x48\x29\x94\x97\x40\xa0\x81\x30\x98\x18\x14\xa9\xc2\x62\x0e\xf7\xc2\xec\xc2\x3c\x17\xa1\x54\xec\x47\xc2\x73\x9f\xf3\x9c\xdf\x39\x43\x7c\x22\x12\x3d\xef\x13\x93\x8b\x8b\xcc\xc9\x7f\x6f\xce\x5e\xb9\xe7\xee\xd9\x4b\xf7\xe4\xc5\xe9\xbb\xd7\x6e\xe6\xf2\x92\x18\xd1\xaf\xd2\x1f\xd3\xbf\xa3\xff\x93\xea\x1b\xfd\x11\x55\x49\x2f\x1b\x3a\x6a\x11\xef\x89\x16\xd1\x26\xf2\x0e\xa1\xa8\x42\x22\x26\xee\x89\x1c\x51\x26\x3e\xdb\x89\x05\x51\x95\x39\x4f\x39\x8e\xee\xdd\x9a\xca\x17\x22\x21\xca\xbb\x25\x11\x55\x90\xd6\x8a\x54\x01\x55\x2c\x83\xea\x87\x55\xf4\xe9\x5f\x11\x33\xe2\x5e\x5f\x7f\x35\xe3\x2e\x31\xa4\x8a\x52\xcc\x36\x9e\x4f\x55\x22\x42\xeb\x60\x78\x28\xb2\x9e\x16\x4d\xb3\x41\x0f\xce\x5e\x20\x6d\x2b\x22\xff\x78\xc6\xb1\x1f\x2f\x16\xfb\x7b\xcf\x5e\x5e\x6c\xa3\x77\xf0\xaa\x2f\x1b\x75\x6f\xa0\x7b\x01\x31\x32\x49\xa4\x97\x53\xab\x1c\x53\x05\xab\x87\x50\xd7\x9b\xc4\xc4\x5c\x77\x4c\xd8\xa4\x2a\x6d\xfa\x51\xea\x41\x0c\xa1\x4e\xf4\xed\x05\x85\xd5\x3c\xb2\x68\x86\x16\xd3\x21\x94\x7f\x22\x26\x42\xbb\x23\xb4\xaf\xb7\xa0\x47\x54\x4a\x78\x09\xb2\x82\x5d\x7f\x2b\x36\x67\xb1\x69\xd4\xe5\xae\xef\x0f\xc4\xd5\x8e\x48\x39\xf5\xba\xeb\x69\xe7\x51\xd3\x83\xb3\x19\xb6\x65\x0e\xc5\xf5\x2c\x21\x06\xc4\xe4\x69\x4e\x35\x22\x5e\xfd\xaa\xe8\x7c\x89\x28\xaf\xe6\x39\x13\x2c\x57\xb3\x88\xa8\xc8\x80\x9c\x2a\x5e\x17\x31\x91\xfc\x55\x98\xff\xdd\xf3\x53\xf7\xed\x41\x6f\x06\x92\xf1\x91\x2f\x89\xa3\x9e\x33\x35\x65\x09\x4f\xe4\x24\x73\x33\x49\xef\x9a\x56\xbd\xf5\xa4\x17\x16\x81\x5e\x7c\x20\x3a\x7f\x32\x40\xb8\x43\x57\xa3\xa7\x32\x8e\x93\x7e\xcc\x13\x63\xa2\xbf\x8b\xa0\x7c\x5c\xcc\x7d\x84\xa6\x11\x08\xcd\x7a\xf7\xd9\x76\xea\xa4\x61\x7f\x14\x84\x7d\xe7\xc6\xfe\xbd\x5d\x54\xdd\xaa\x3a\xd9\x6c\xd6\x79\xe6\x53\xc9\xd0\x87\xf8\xf4\xdb\xce\xef\x00\x00\x00\xff\xff\xa3\x2f\x1e\xf3\x59\x03\x00\x00")

func templatesJaEmlProposalRejectedEmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJaEmlProposalRejectedEml,
		"templates/ja/eml/proposal-rejected.eml",
	)
}

func templatesJaEmlProposalRejectedEml() (*asset, error) {
	bytes, err := templatesJaEmlProposalRejectedEmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ja/eml/proposal-rejected.eml", size: 857, mode: os.FileMode(420), modTime: time.Unix(1477625696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/en/eml/confirm_registration.eml": templatesEnEmlConfirm_registrationEml,
	"templates/en/eml/proposal-accepted.eml": templatesEnEmlProposalAcceptedEml,
	"templates/en/eml/proposal-rejected.eml": templatesEnEmlProposalRejectedEml,
	"templates/ja/eml/proposal-accepted.eml": templatesJaEmlProposalAcceptedEml,
	"templates/ja/eml/proposal-rejected.eml": templatesJaEmlProposalRejectedEml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"en": {nil, map[string]*bintree{
			"eml": {nil, map[string]*bintree{
				"confirm_registration.eml": {templatesEnEmlConfirm_registrationEml, map[string]*bintree{}},
				"proposal-accepted.eml": {templatesEnEmlProposalAcceptedEml, map[string]*bintree{}},
				"proposal-rejected.eml": {templatesEnEmlProposalRejectedEml, map[string]*bintree{}},
			}},
		}},
		"ja": {nil, map[string]*bintree{
			"eml": {nil, map[string]*bintree{
				"proposal-accepted.eml": {templatesJaEmlProposalAcceptedEml, map[string]*bintree{}},
				"proposal-rejected.eml": {templatesJaEmlProposalRejectedEml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
