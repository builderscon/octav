// DO NOT EDIT. Automatically generated by hsup at Mon, 07 Mar 2016 20:08:26 JST
package client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/builderscon/octav/octav"
)

type Client struct {
	Client   *http.Client
	Endpoint string
}

func New(s string) *Client {
	return &Client{
		Client:   &http.Client{},
		Endpoint: s,
	}
}

func (c *Client) CreateConference(in *octav.Conference) (*octav.Conference, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/conference/create")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Post(u.String(), "application/json", &buf)
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload *octav.Conference
	err = json.NewDecoder(res.Body).Decode(payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) CreateRoom(in *octav.Room) (*octav.Room, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/room/create")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Post(u.String(), "application/json", &buf)
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload *octav.Room
	err = json.NewDecoder(res.Body).Decode(payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) CreateSession(in interface{}) (*octav.Session, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/session/create")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Post(u.String(), "application/json", &buf)
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload *octav.Session
	err = json.NewDecoder(res.Body).Decode(payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) CreateUser(in interface{}) (*octav.User, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/user/create")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Post(u.String(), "application/json", &buf)
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload *octav.User
	err = json.NewDecoder(res.Body).Decode(payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) CreateVenue(in *octav.Venue) (*octav.Venue, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/venue/create")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Post(u.String(), "application/json", &buf)
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload octav.Venue
	err = json.NewDecoder(res.Body).Decode(&payload)
	if err != nil {
		return nil, err
	}
	return &payload, nil
}

func (c *Client) DeleteVenue(in interface{}) error {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/venue/delete")
	if err != nil {
		return err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return err
	}
	res, err := c.Client.Post(u.String(), "application/json", &buf)
	if err != nil {
		return err
	}
	if res.StatusCode != http.StatusOK {
		return fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	return nil
}

func (c *Client) ListRooms(in interface{}) ([]octav.Room, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/room/list")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Get(u.String())
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload []octav.Room
	err = json.NewDecoder(res.Body).Decode(&payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) ListSessionsByConference(in interface{}) (interface{}, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/schedule/list")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Get(u.String())
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload interface{}
	err = json.NewDecoder(res.Body).Decode(payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) ListVenues(in interface{}) ([]octav.Venue, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/venue/list")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Get(u.String())
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload []octav.Venue
	err = json.NewDecoder(res.Body).Decode(&payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) LookupSession(in interface{}) (*octav.Session, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/session/lookup")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Get(u.String())
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload *octav.Session
	err = json.NewDecoder(res.Body).Decode(payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}

func (c *Client) LookupVenue(in interface{}) (interface{}, error) {
	var err error
	u, err := url.Parse(c.Endpoint + "/v1/venue/lookup")
	if err != nil {
		return nil, err
	}
	buf := bytes.Buffer{}
	err = json.NewEncoder(&buf).Encode(in)
	if err != nil {
		return nil, err
	}
	res, err := c.Client.Get(u.String())
	if err != nil {
		return nil, err
	}
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf(`Invalid response: '%s'`, res.Status)
	}
	var payload interface{}
	err = json.NewDecoder(res.Body).Decode(payload)
	if err != nil {
		return nil, err
	}
	return payload, nil
}
