// Automatically generated by genmodel utility. DO NOT EDIT!
package octav

import (
	"encoding/json"
	"github.com/builderscon/octav/octav/db"
)

func (v Room) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "id", "venue_id", "name", "capacity"), nil
}

func (v Room) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "venue_id":
		return v.VenueID, nil
	case "name":
		return v.Name, nil
	case "capacity":
		return v.Capacity, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v Room) MarshalJSON() ([]byte, error) {
	m := make(map[string]interface{})
	m["id"] = v.ID
	m["venue_id"] = v.VenueID
	m["name"] = v.Name
	m["capacity"] = v.Capacity
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return marshalJSONWithL10N(buf, v.L10N)
}
func (v *Room) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			v.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			v.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			v.Name = jv.(string)
			delete(m, "name")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["capacity"]; ok {
		switch jv.(type) {
		case float64:
			v.Capacity = uint(jv.(float64))
			delete(m, "capacity")
		default:
			return ErrInvalidFieldType
		}
	}
	return nil
}

func (v *Room) Load(tx *db.Tx, id string) error {
	vdb := db.Room{}
	if err := vdb.LoadByEID(tx, id); err != nil {
		return err
	}

	v.ID = vdb.EID
	v.VenueID = vdb.VenueID
	v.Name = vdb.Name
	v.Capacity = vdb.Capacity

	ls, err := db.LoadLocalizedStringsForParent(tx, v.ID, "Room")
	if err != nil {
		return err
	}

	if len(ls) > 0 {
		v.L10N = LocalizedFields{}
		for _, l := range ls {
			v.L10N.Set(l.Language, l.Name, l.Localized)
		}
	}
	return nil
}

func (v *Room) Create(tx *db.Tx) error {
	if v.ID == "" {
		v.ID = UUID()
	}

	vdb := db.Room{
		EID:      v.ID,
		VenueID:  v.VenueID,
		Name:     v.Name,
		Capacity: v.Capacity,
	}
	if err := vdb.Create(tx); err != nil {
		return err
	}

	if err := v.L10N.CreateLocalizedStrings(tx, "Room", v.ID); err != nil {
		return err
	}
	return nil
}
