// Automatically generated by genmodel utility. DO NOT EDIT!
package octav

import "encoding/json"

func (v Room) GetPropNames() ([]string, error) {
	l, _ := v.L10N.GetPropNames()
	return append(l, "id", "venue_id", "name", "capacity"), nil
}

func (v Room) GetPropValue(s string) (interface{}, error) {
	switch s {
	case "id":
		return v.ID, nil
	case "venue_id":
		return v.VenueID, nil
	case "name":
		return v.Name, nil
	case "capacity":
		return v.Capacity, nil
	default:
		return v.L10N.GetPropValue(s)
	}
}

func (v Room) MarshalJSON() ([]byte, error) {
	m := make(map[string]interface{})
	m["id"] = v.ID
	m["venue_id"] = v.VenueID
	m["name"] = v.Name
	m["capacity"] = v.Capacity
	buf, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}
	return marshalJSONWithL10N(buf, v.L10N)
}
func (v *Room) UnmarshalJSON(data []byte) error {
	m := make(map[string]interface{})
	if err := json.Unmarshal(data, &m); err != nil {
		return err
	}
	if jv, ok := m["id"]; ok {
		switch jv.(type) {
		case string:
			v.ID = jv.(string)
			delete(m, "id")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["venue_id"]; ok {
		switch jv.(type) {
		case string:
			v.VenueID = jv.(string)
			delete(m, "venue_id")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["name"]; ok {
		switch jv.(type) {
		case string:
			v.Name = jv.(string)
			delete(m, "name")
		default:
			return ErrInvalidFieldType
		}
	}
	if jv, ok := m["capacity"]; ok {
		switch jv.(type) {
		case float64:
			v.Capacity = uint(jv.(float64))
			delete(m, "capacity")
		default:
			return ErrInvalidFieldType
		}
	}
	return nil
}
